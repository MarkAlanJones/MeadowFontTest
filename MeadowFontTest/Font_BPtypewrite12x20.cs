using System.Collections.Generic;

namespace Meadow.Foundation.Graphics
{
    // !!! This code is generated by a tool (FontConverter) !!!
    // Based on BPtypewrite Copyright (c) 2010 by George Triantafyllakos. All rights reserved.
    // Using threshold of 58 at 2020-06-24T17:29:11.0762040-04:00
    public class BPtypewrite12x20 : FontBase
    {
        private const int WIDTH = 12;
        private const int HEIGHT = 20;

        public override int Width { get { return WIDTH; } }
        public override int Height { get { return HEIGHT; } }

        /// <summary>
        ///   Font table containing the binary representation of ASCII characters.
        /// </summary>
        private static readonly byte[][] _fontTable =
        {
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0020( ) space
            new byte[] { 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x06, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0021(!) exclamation mark
            new byte[] { 0xB8, 0x81, 0x1B, 0xB8, 0x01, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0022(") quotation mark
            new byte[] { 0x00, 0x80, 0x11, 0x98, 0x81, 0x19, 0xFC, 0xE3, 0x7F, 0x98, 0x83, 0x19, 0x98, 0x81, 0x39, 0xFE, 0xC7, 0x3B, 0x98, 0x81, 0x19, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0023(#) number sign
            new byte[] { 0x40, 0x00, 0x06, 0xE0, 0x80, 0x3F, 0x1C, 0xC0, 0x00, 0x38, 0x00, 0x0F, 0xC0, 0x03, 0x30, 0x00, 0xC3, 0x3D, 0xF8, 0x01, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0024($) dollar sign
            new byte[] { 0x00, 0xC0, 0x7F, 0x3E, 0x63, 0x33, 0xB6, 0x61, 0x1F, 0xFC, 0x80, 0x0D, 0x60, 0x03, 0x7F, 0xF0, 0x86, 0x6D, 0xD8, 0xC6, 0x7C, 0x8C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0025(%) percent sign
            new byte[] { 0xF8, 0xC0, 0x0F, 0x8C, 0xC1, 0x1C, 0xCC, 0xC0, 0x0F, 0x38, 0xC0, 0x01, 0x8C, 0x6F, 0x3C, 0x06, 0x63, 0x30, 0x0E, 0xC3, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0026(&) ampersand
            new byte[] { 0xE0, 0x00, 0x06, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0027(') apostrophe
            new byte[] { 0xC0, 0x00, 0x06, 0x60, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x60, 0x00, 0x06, 0xC0, 0x00, 0x1C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00}, //0028(() left parenthesis
            new byte[] { 0x60, 0x00, 0x0E, 0xC0, 0x00, 0x0C, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x0C, 0xC0, 0x00, 0x0E, 0x60, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00}, //0029()) right parenthesis
            new byte[] { 0xF0, 0x00, 0x1F, 0xF8, 0x03, 0x0E, 0xB0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //002A(*) asterisk
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0xFC, 0xE7, 0xFF, 0xE0, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //002B(+) plus sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0E, 0x60, 0x00, 0x07, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00}, //002C(,) comma
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //002D(-) hyphen-minus
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //002E(.) full stop
            new byte[] { 0x00, 0x07, 0x30, 0x80, 0x03, 0x18, 0xC0, 0x01, 0x0C, 0xE0, 0x00, 0x06, 0x70, 0x00, 0x03, 0x38, 0x80, 0x01, 0x1C, 0xC0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //002F(/) solidus
            new byte[] { 0x00, 0x00, 0x0F, 0xB8, 0xC1, 0x39, 0x8C, 0xC3, 0x7C, 0xCC, 0xC7, 0x6E, 0x6C, 0xC6, 0x67, 0x3C, 0xC6, 0x33, 0x18, 0x83, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0030(0) digit zero
            new byte[] { 0x00, 0x00, 0x06, 0x78, 0xC0, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x0F, 0xFC, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0031(1) digit one
            new byte[] { 0x00, 0x00, 0x0F, 0xFC, 0xC1, 0x38, 0x00, 0x03, 0x30, 0x80, 0x03, 0x18, 0xC0, 0x01, 0x0C, 0x60, 0x00, 0x07, 0x38, 0xC0, 0x03, 0xFC, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0032(2) digit two
            new byte[] { 0x00, 0x80, 0x0F, 0xDC, 0x01, 0x18, 0x80, 0x01, 0x18, 0xE0, 0x00, 0x1F, 0x80, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0xC3, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0033(3) digit three
            new byte[] { 0x00, 0x00, 0x18, 0xC0, 0x01, 0x1C, 0xE0, 0x01, 0x1E, 0xB0, 0x01, 0x1B, 0x98, 0x81, 0x19, 0xFC, 0x07, 0x3C, 0x80, 0x01, 0x18, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0034(4) digit four
            new byte[] { 0x00, 0x00, 0x1F, 0xF0, 0x81, 0x03, 0x18, 0x80, 0x01, 0xF8, 0x01, 0x39, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x80, 0xC3, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0035(5) digit five
            new byte[] { 0x00, 0x00, 0x1C, 0xE0, 0x01, 0x03, 0x18, 0x80, 0x01, 0xFC, 0xC1, 0x3B, 0x1C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x18, 0x83, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0036(6) digit six
            new byte[] { 0x00, 0x80, 0x3F, 0xFC, 0x03, 0x30, 0x80, 0x03, 0x18, 0x80, 0x01, 0x18, 0xC0, 0x01, 0x0C, 0xC0, 0x00, 0x0C, 0x60, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0037(7) digit seven
            new byte[] { 0x00, 0x00, 0x0F, 0xF8, 0x81, 0x31, 0x18, 0x83, 0x31, 0xF0, 0x01, 0x0F, 0x98, 0x81, 0x31, 0x0C, 0xC3, 0x30, 0x1C, 0x83, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0038(8) digit eight
            new byte[] { 0x00, 0x00, 0x0F, 0xF8, 0xC1, 0x31, 0x0C, 0xC3, 0x60, 0x0C, 0xC6, 0x71, 0xF8, 0x07, 0x3F, 0x00, 0x03, 0x38, 0xC0, 0x01, 0x0F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0039(9) digit nine
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //003A(:) colon
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0E, 0x60, 0x00, 0x07, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00}, //003B(;) semicolon
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x78, 0xE0, 0x81, 0x07, 0x1C, 0xE0, 0x01, 0x3C, 0x00, 0x0F, 0xC0, 0x03, 0x78, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //003C(<) less-than sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //003D(=) equals sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x1C, 0x80, 0x07, 0xE0, 0x01, 0x78, 0x00, 0x07, 0x78, 0xE0, 0x81, 0x07, 0x1C, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //003E(>) greater-than sign
            new byte[] { 0xF8, 0xC1, 0x39, 0x00, 0x03, 0x30, 0x00, 0x03, 0x38, 0x80, 0x01, 0x0C, 0xE0, 0x00, 0x06, 0x00, 0x00, 0x06, 0xF0, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //003F(?) question mark
            new byte[] { 0x00, 0x00, 0x00, 0xF0, 0x83, 0x71, 0x0C, 0xC6, 0x7F, 0xB6, 0xEF, 0xD9, 0x9E, 0xED, 0x59, 0x9E, 0xE7, 0x7F, 0x6C, 0xC3, 0x01, 0xF8, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0040(@) commercial at
            new byte[] { 0x40, 0x00, 0x0E, 0xE0, 0x00, 0x0F, 0xF0, 0x00, 0x1B, 0xB0, 0x81, 0x19, 0xB8, 0x81, 0x3F, 0x98, 0xC3, 0x30, 0x0C, 0xC3, 0x60, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0041(A) latin capital letter a
            new byte[] { 0x7C, 0xC0, 0x1F, 0x8C, 0xC1, 0x10, 0x8C, 0xC1, 0x18, 0xFC, 0xC0, 0x1F, 0x8C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0042(B) latin capital letter b
            new byte[] { 0xE0, 0x01, 0x3F, 0x38, 0x80, 0x01, 0x1C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0x80, 0x01, 0x18, 0x00, 0x7F, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0043(C) latin capital letter c
            new byte[] { 0x7C, 0xC0, 0x1F, 0x8C, 0xC1, 0x30, 0x0C, 0xC3, 0x70, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x30, 0x0C, 0xC3, 0x38, 0x8C, 0xC1, 0x0F, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0044(D) latin capital letter d
            new byte[] { 0xF8, 0xC1, 0x3F, 0x1C, 0xC0, 0x01, 0x1C, 0xC0, 0x01, 0x1C, 0xC0, 0x1F, 0x1C, 0xC0, 0x01, 0x1C, 0xC0, 0x01, 0x1C, 0xC0, 0x03, 0xF8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0045(E) latin capital letter e
            new byte[] { 0xF8, 0x81, 0x3F, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x1F, 0x38, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0046(F) latin capital letter f
            new byte[] { 0xE0, 0x01, 0x3F, 0x18, 0xC0, 0x01, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x3C, 0x8C, 0xC7, 0x60, 0x0C, 0x86, 0x61, 0x18, 0x07, 0x3B, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0047(G) latin capital letter g
            new byte[] { 0x08, 0xC2, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x9C, 0xC3, 0x3F, 0x1C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0048(H) latin capital letter h
            new byte[] { 0xF8, 0x83, 0x3F, 0xE0, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1F, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0049(I) latin capital letter i
            new byte[] { 0xF0, 0x81, 0x3F, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x1C, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //004A(J) latin capital letter j
            new byte[] { 0x0C, 0xC3, 0x18, 0xCC, 0xC1, 0x0C, 0xEC, 0xC0, 0x07, 0x7C, 0xC0, 0x0F, 0xDC, 0xC0, 0x0C, 0x8C, 0xC1, 0x18, 0x0C, 0xC3, 0x30, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //004B(K) latin capital letter k
            new byte[] { 0x08, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x03, 0xF8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //004C(L) latin capital letter l
            new byte[] { 0x0C, 0xC2, 0x71, 0x1C, 0xC7, 0x71, 0x1C, 0xC7, 0x79, 0xBC, 0xC7, 0x7B, 0xBC, 0xC7, 0x6F, 0xEC, 0xC6, 0x6E, 0xEC, 0xC6, 0x6E, 0x4C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //004D(M) latin capital letter m
            new byte[] { 0x08, 0xC2, 0x31, 0x1C, 0xC3, 0x33, 0x3C, 0xC3, 0x37, 0x6C, 0xC3, 0x36, 0xCC, 0xC3, 0x3C, 0xCC, 0xC3, 0x38, 0x8C, 0xC3, 0x38, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //004E(N) latin capital letter n
            new byte[] { 0xF0, 0x80, 0x1F, 0x1C, 0xC3, 0x30, 0x0C, 0xC7, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x18, 0x83, 0x3B, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //004F(O) latin capital letter o
            new byte[] { 0xF8, 0xC0, 0x1F, 0x8C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0xCC, 0xC1, 0x0F, 0x3C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0050(P) latin capital letter p
            new byte[] { 0xF0, 0x80, 0x1F, 0x1C, 0xC3, 0x30, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x18, 0x83, 0x3F, 0xF0, 0x01, 0x0E, 0xC0, 0x03, 0x78, 0x00, 0x00, 0x00}, //0051(Q) latin capital letter q
            new byte[] { 0x78, 0xC0, 0x1F, 0x8C, 0xC1, 0x30, 0x0C, 0xC3, 0x30, 0x8C, 0xC3, 0x18, 0xFC, 0xC0, 0x0F, 0xCC, 0xC1, 0x18, 0x8C, 0xC3, 0x30, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0052(R) latin capital letter r
            new byte[] { 0xF0, 0x80, 0x1F, 0x1C, 0xC0, 0x01, 0x1C, 0x80, 0x03, 0x70, 0x00, 0x0E, 0xC0, 0x01, 0x38, 0x00, 0x03, 0x30, 0x00, 0xC3, 0x3F, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0053(S) latin capital letter s
            new byte[] { 0xF8, 0xC3, 0x3F, 0xE0, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0054(T) latin capital letter t
            new byte[] { 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x30, 0x0C, 0x83, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0055(U) latin capital letter u
            new byte[] { 0x04, 0xC6, 0x60, 0x0C, 0xC3, 0x30, 0x18, 0x83, 0x31, 0x18, 0x83, 0x1B, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x1E, 0xE0, 0x00, 0x0E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0056(V) latin capital letter v
            new byte[] { 0x04, 0xC2, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x26, 0xEC, 0x83, 0x3F, 0xF8, 0x83, 0x3F, 0xF8, 0x83, 0x3F, 0xF8, 0x83, 0x3B, 0xB0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0057(W) latin capital letter w
            new byte[] { 0x08, 0x82, 0x31, 0x98, 0x01, 0x1B, 0xB0, 0x01, 0x0F, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xB0, 0x01, 0x1B, 0x98, 0x83, 0x31, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0058(X) latin capital letter x
            new byte[] { 0x0C, 0xC2, 0x30, 0x18, 0x83, 0x31, 0x98, 0x01, 0x1B, 0xB0, 0x01, 0x0F, 0xE0, 0x00, 0x0E, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0059(Y) latin capital letter y
            new byte[] { 0xF8, 0x83, 0x3F, 0x00, 0x03, 0x18, 0x80, 0x01, 0x0C, 0xC0, 0x00, 0x06, 0x60, 0x00, 0x03, 0x30, 0x80, 0x01, 0x18, 0xC0, 0x01, 0xFC, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //005A(Z) latin capital letter z
            new byte[] { 0x70, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x70, 0x00, 0x0E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00}, //005B([) left square bracket
            new byte[] { 0x0C, 0xC0, 0x00, 0x18, 0x80, 0x01, 0x30, 0x00, 0x07, 0x60, 0x00, 0x0E, 0xC0, 0x00, 0x1C, 0x80, 0x01, 0x38, 0x00, 0x03, 0x70, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //005C(\) reverse solidus
            new byte[] { 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00}, //005D(]) right square bracket
            new byte[] { 0xF0, 0x80, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //005E(^) circumflex accent
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //005F(_) low line
            new byte[] { 0xF0, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0060(`) grave accent
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x3F, 0x00, 0x03, 0x60, 0x00, 0x86, 0x7F, 0x1C, 0xC6, 0x60, 0x0C, 0xC7, 0x7D, 0xF8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0061(a) latin small letter a
            new byte[] { 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0xFC, 0xC0, 0x1F, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x1D, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0062(b) latin small letter b
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x3F, 0x18, 0x80, 0x01, 0x0C, 0xC0, 0x00, 0x0C, 0x80, 0x01, 0x18, 0x00, 0x3F, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0063(c) latin small letter c
            new byte[] { 0x00, 0x06, 0x60, 0x00, 0x06, 0x70, 0xE0, 0x07, 0x7F, 0x18, 0xC7, 0x61, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x1C, 0x87, 0x7F, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0064(d) latin small letter d
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x81, 0x3F, 0x18, 0xC3, 0x70, 0x8C, 0xC3, 0x1F, 0x7C, 0xC0, 0x00, 0x18, 0x80, 0x7F, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0065(e) latin small letter e
            new byte[] { 0xE0, 0x07, 0x07, 0x30, 0x00, 0x03, 0x70, 0xC0, 0x3F, 0x70, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x38, 0xC0, 0x01, 0x0C, 0x00, 0x00}, //0066(f) latin small letter f
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x3F, 0x38, 0x87, 0x61, 0x0C, 0xC6, 0x60, 0x0C, 0xC7, 0x70, 0x1C, 0x87, 0x7B, 0xF0, 0x07, 0x70, 0x00, 0x83, 0x3F, 0xF0, 0x01, 0x00}, //0067(g) latin small letter g
            new byte[] { 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0xCC, 0xC0, 0x3F, 0x1C, 0xC3, 0x70, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0068(h) latin small letter h
            new byte[] { 0xF0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x07, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x0E, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0069(i) latin small letter i
            new byte[] { 0x80, 0x03, 0x38, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x80, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x80, 0x01, 0x1E, 0xF8, 0x00, 0x00}, //006A(j) latin small letter j
            new byte[] { 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC2, 0x18, 0xCC, 0xC1, 0x0E, 0x7C, 0xC0, 0x0F, 0xDC, 0xC0, 0x1C, 0x8C, 0xC1, 0x30, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //006B(k) latin small letter k
            new byte[] { 0x7C, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x0E, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //006C(l) latin small letter l
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xC3, 0x7F, 0xEC, 0xC6, 0x66, 0x6C, 0xC6, 0x66, 0x6C, 0xC6, 0x66, 0x6C, 0xC6, 0x66, 0x64, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //006D(m) latin small letter m
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x3F, 0x1C, 0xC3, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //006E(n) latin small letter n
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x3F, 0x18, 0xC3, 0x30, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x18, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //006F(o) latin small letter o
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xC0, 0x1F, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x1C, 0xFC, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0x00, 0x00}, //0070(p) latin small letter p
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x3F, 0x38, 0x83, 0x31, 0x1C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x1C, 0x83, 0x33, 0xF0, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x02, 0x00}, //0071(q) latin small letter q
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x7F, 0x70, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x00, 0x03, 0x30, 0x80, 0x07, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0072(r) latin small letter r
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x81, 0x3F, 0x18, 0x80, 0x01, 0x78, 0x00, 0x1F, 0x80, 0x03, 0x30, 0x00, 0xC3, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0073(s) latin small letter s
            new byte[] { 0x00, 0x00, 0x00, 0x60, 0x00, 0x06, 0xF8, 0xC3, 0x3F, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1C, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0074(t) latin small letter t
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xC2, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x1C, 0x83, 0x3F, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0075(u) latin small letter u
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x70, 0x1C, 0x83, 0x31, 0x98, 0x03, 0x1B, 0xB0, 0x01, 0x1F, 0xE0, 0x00, 0x0E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0076(v) latin small letter v
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x66, 0xEC, 0xC6, 0x6E, 0xEC, 0xC7, 0x3F, 0xF8, 0x83, 0x3F, 0xB8, 0x83, 0x3B, 0xB0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0077(w) latin small letter w
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x39, 0xB0, 0x01, 0x0F, 0xE0, 0x00, 0x0E, 0xF0, 0x00, 0x1F, 0xB8, 0x81, 0x39, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0078(x) latin small letter x
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xC2, 0x70, 0x0C, 0x83, 0x31, 0x98, 0x81, 0x19, 0xD0, 0x00, 0x0F, 0xF0, 0x00, 0x07, 0x70, 0x00, 0x03, 0x30, 0x80, 0x03, 0x18, 0x00, 0x00}, //0079(y) latin small letter y
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x80, 0x01, 0x1C, 0xC0, 0x00, 0x06, 0x70, 0x00, 0x03, 0x18, 0xC0, 0x03, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //007A(z) latin small letter z
            new byte[] { 0x60, 0x00, 0x06, 0x60, 0x00, 0x0C, 0xC0, 0x01, 0x18, 0xE0, 0x00, 0x07, 0xE0, 0x00, 0x18, 0xC0, 0x01, 0x0C, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1E, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00}, //007B({) left curly bracket
            new byte[] { 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00}, //007C(|) vertical line
            new byte[] { 0xC0, 0x00, 0x0C, 0xE0, 0x00, 0x06, 0x30, 0x00, 0x03, 0x70, 0x00, 0x1C, 0xE0, 0x00, 0x03, 0x30, 0x00, 0x07, 0x60, 0x00, 0x0C, 0xC0, 0x00, 0x0E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00}, //007D(}) right curly bracket
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x43, 0xEE, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //007E(~) tilde
            new byte[] { 0x00, 0x00, 0x3E, 0xF0, 0x03, 0x03, 0x30, 0x80, 0x03, 0x38, 0xC0, 0x1F, 0x78, 0x00, 0x03, 0x30, 0x80, 0x01, 0x18, 0xC0, 0x03, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00A3(£) pound sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC6, 0x3F, 0x98, 0xC3, 0x30, 0x0C, 0xC3, 0x31, 0xB8, 0xC3, 0x7F, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00A4(¤) currency sign
            new byte[] { 0x00, 0xC0, 0x60, 0x0C, 0x83, 0x31, 0x98, 0x83, 0x1B, 0xB0, 0x01, 0x0F, 0xF0, 0xC0, 0x3F, 0xE0, 0x80, 0x3F, 0xFC, 0x03, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00A5(¥) yen sign
            new byte[] { 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00}, //00A6(¦) broken bar
            new byte[] { 0x00, 0x80, 0x1F, 0x98, 0xC3, 0x00, 0x18, 0x80, 0x07, 0xEC, 0xC1, 0x39, 0x38, 0x03, 0x0F, 0xC0, 0x03, 0x30, 0x08, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00A7(§) section sign
            new byte[] { 0xB8, 0x83, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00A8(¨) diaeresis
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x81, 0x39, 0x0C, 0x66, 0x6F, 0x16, 0x64, 0xC1, 0x16, 0x64, 0x6F, 0x4C, 0xC6, 0x39, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00A9(©) copyright sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xB0, 0x81, 0x0F, 0xD8, 0x80, 0x0D, 0xF0, 0x01, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00AB(«) left-pointing double angle quotation mark
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7F, 0xFE, 0x07, 0x60, 0x00, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00AC(¬) not sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00AD(­) soft hyphen
            new byte[] { 0xB8, 0xC3, 0x36, 0xEC, 0xC6, 0x66, 0x8C, 0x83, 0x39, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00AE(®) registered sign
            new byte[] { 0xF0, 0x81, 0x19, 0x98, 0x83, 0x1B, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00B0(°) degree sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x06, 0x60, 0xC0, 0x7F, 0xFE, 0x07, 0x0E, 0x60, 0x00, 0x06, 0x40, 0xC0, 0x7F, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00B1(±) plus-minus sign
            new byte[] { 0xF0, 0x01, 0x18, 0xC0, 0x00, 0x0C, 0x60, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00B2(²) superscript two
            new byte[] { 0xF0, 0x00, 0x0C, 0xE0, 0x00, 0x18, 0x80, 0x01, 0x0F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00B3(³) superscript three
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xC1, 0x18, 0x8C, 0xC1, 0x18, 0x8C, 0xC1, 0x18, 0x8C, 0xC1, 0x18, 0x8C, 0xC3, 0x7F, 0x7C, 0xC6, 0x00, 0x0C, 0xC0, 0x00, 0x04, 0x00, 0x00}, //00B5(µ) micro sign
            new byte[] { 0x00, 0x00, 0x0E, 0xF8, 0xC2, 0x6F, 0xFC, 0xC6, 0x6F, 0xFC, 0x86, 0x6F, 0xC0, 0x06, 0x6C, 0xC0, 0x06, 0x6C, 0xC0, 0x06, 0x6C, 0xC0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00B6(¶) pilcrow sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00B7(·) middle dot
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1D, 0xB8, 0x01, 0x33, 0x30, 0x03, 0x33, 0xB8, 0xC1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00BB(») right-pointing double angle quotation mark
            new byte[] { 0x00, 0xC0, 0x30, 0x8E, 0xC1, 0x1C, 0xCC, 0xC0, 0x0E, 0x6C, 0x00, 0x07, 0xB0, 0x87, 0x6B, 0x18, 0xC6, 0x61, 0x0C, 0xE3, 0x18, 0xC6, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00BD(½) vulgar fraction one half
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x03, 0x1F, 0xF0, 0x00, 0x0F, 0xF8, 0x81, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00D7(×) multiplication sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xF0, 0x00, 0x0E, 0x40, 0x00, 0x00, 0xFE, 0xC7, 0x3F, 0x00, 0x00, 0x0E, 0xF0, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //00F7(÷) division sign
            new byte[] { 0xC0, 0x07, 0x0C, 0xC0, 0x00, 0x0E, 0xF0, 0x03, 0x0E, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x30, 0x00, 0x03, 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00}, //0192(ƒ) latin small letter f with hook
            new byte[] { 0x60, 0x00, 0x06, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0384(΄) greek tonos
            new byte[] { 0xFC, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0385(΅) greek dialytika tonos
            new byte[] { 0x4C, 0xC0, 0x0C, 0xE4, 0x00, 0x1E, 0xE0, 0x01, 0x1E, 0xB0, 0x01, 0x33, 0xF0, 0x03, 0x3F, 0x30, 0x83, 0x21, 0x18, 0x86, 0x61, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0386(Ά) greek capital letter alpha with tonos
            new byte[] { 0xCC, 0xC3, 0x7E, 0x66, 0x00, 0x06, 0x60, 0x00, 0x06, 0xE0, 0x00, 0x3E, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x0E, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0388(Έ) greek capital letter epsilon with tonos
            new byte[] { 0x2C, 0x44, 0x66, 0x66, 0x06, 0x66, 0x60, 0x06, 0x66, 0xE0, 0x06, 0x7E, 0x60, 0x06, 0x66, 0x60, 0x06, 0x66, 0x60, 0x06, 0x66, 0x60, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0389(Ή) greek capital letter eta with tonos
            new byte[] { 0xF0, 0x81, 0x3F, 0xE0, 0x00, 0x0C, 0xD8, 0x80, 0x0C, 0xCC, 0xC0, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x1E, 0xF8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //038A(Ί) greek capital letter iota with tonos
            new byte[] { 0xCC, 0x41, 0x3E, 0x36, 0x06, 0x63, 0x30, 0x06, 0x63, 0x30, 0x06, 0x63, 0x30, 0x06, 0x63, 0x30, 0x06, 0x63, 0x20, 0x02, 0x3E, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //038C(Ό) greek capital letter omicron with tonos
            new byte[] { 0x6C, 0x64, 0x66, 0x66, 0x06, 0x64, 0xC0, 0x02, 0x3C, 0xC0, 0x03, 0x3C, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //038E(Ύ) greek capital letter upsilon with tonos
            new byte[] { 0xCC, 0xC1, 0x3E, 0x36, 0x03, 0x23, 0x30, 0x06, 0x63, 0x30, 0x06, 0x63, 0x30, 0x06, 0x63, 0x30, 0x02, 0x23, 0x30, 0x03, 0x37, 0xF8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //038F(Ώ) greek capital letter omega with tonos
            new byte[] { 0xFC, 0x03, 0x06, 0x00, 0x00, 0x00, 0x38, 0xC0, 0x07, 0x70, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1E, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0390(ΐ) greek small letter iota with dialytika and tonos
            new byte[] { 0x40, 0x00, 0x0E, 0xE0, 0x00, 0x0F, 0xF0, 0x00, 0x1B, 0xB0, 0x81, 0x19, 0xB8, 0x81, 0x3F, 0x98, 0xC3, 0x30, 0x0C, 0xC3, 0x60, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0391(Α) greek capital letter alpha
            new byte[] { 0x7C, 0xC0, 0x1F, 0x8C, 0xC1, 0x10, 0x8C, 0xC1, 0x18, 0xFC, 0xC0, 0x1F, 0x8C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0392(Β) greek capital letter beta
            new byte[] { 0xF8, 0x83, 0x3F, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0393(Γ) greek capital letter gamma
            new byte[] { 0x40, 0x00, 0x0E, 0xE0, 0x00, 0x0F, 0xF0, 0x00, 0x1B, 0xB0, 0x01, 0x1B, 0x98, 0x81, 0x39, 0x18, 0x83, 0x31, 0x1C, 0xC3, 0x79, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0394(Δ) greek capital letter delta
            new byte[] { 0xF8, 0xC1, 0x3F, 0x1C, 0xC0, 0x01, 0x1C, 0xC0, 0x01, 0x1C, 0xC0, 0x1F, 0x1C, 0xC0, 0x01, 0x1C, 0xC0, 0x01, 0x1C, 0xC0, 0x03, 0xF8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0395(Ε) greek capital letter epsilon
            new byte[] { 0xF8, 0x83, 0x3F, 0x00, 0x03, 0x18, 0x80, 0x01, 0x0C, 0xC0, 0x00, 0x06, 0x60, 0x00, 0x03, 0x30, 0x80, 0x01, 0x18, 0xC0, 0x01, 0xFC, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0396(Ζ) greek capital letter zeta
            new byte[] { 0x08, 0xC2, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x9C, 0xC3, 0x3F, 0x1C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0397(Η) greek capital letter eta
            new byte[] { 0xF0, 0x81, 0x1F, 0x1C, 0xC3, 0x30, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x7F, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x70, 0x18, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0398(Θ) greek capital letter theta
            new byte[] { 0xF8, 0x83, 0x3F, 0xE0, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1F, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0399(Ι) greek capital letter iota
            new byte[] { 0x0C, 0xC3, 0x18, 0xCC, 0xC1, 0x0C, 0xEC, 0xC0, 0x07, 0x7C, 0xC0, 0x0F, 0xDC, 0xC0, 0x0C, 0x8C, 0xC1, 0x18, 0x0C, 0xC3, 0x30, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //039A(Κ) greek capital letter kappa
            new byte[] { 0x40, 0x00, 0x0E, 0xE0, 0x00, 0x0F, 0xF0, 0x00, 0x1B, 0xB0, 0x81, 0x19, 0x98, 0x81, 0x31, 0x18, 0x83, 0x31, 0x0C, 0xC3, 0x70, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //039B(Λ) greek capital letter lamda
            new byte[] { 0x0C, 0xC2, 0x71, 0x1C, 0xC7, 0x71, 0x1C, 0xC7, 0x79, 0xBC, 0xC7, 0x7B, 0xBC, 0xC7, 0x6F, 0xEC, 0xC6, 0x6E, 0xEC, 0xC6, 0x6E, 0x4C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //039C(Μ) greek capital letter mu
            new byte[] { 0x08, 0xC2, 0x31, 0x1C, 0xC3, 0x33, 0x3C, 0xC3, 0x37, 0x6C, 0xC3, 0x36, 0xCC, 0xC3, 0x3C, 0xCC, 0xC3, 0x38, 0x8C, 0xC3, 0x38, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //039D(Ν) greek capital letter nu
            new byte[] { 0xF8, 0xC3, 0x3F, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0xF0, 0x81, 0x1F, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x0F, 0xFC, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //039E(Ξ) greek capital letter xi
            new byte[] { 0xF0, 0x80, 0x1F, 0x1C, 0xC3, 0x30, 0x0C, 0xC7, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x70, 0x18, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //039F(Ο) greek capital letter omicron
            new byte[] { 0xF8, 0xC3, 0x3F, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03A0(Π) greek capital letter pi
            new byte[] { 0xF8, 0xC0, 0x1F, 0x8C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0xCC, 0xC1, 0x0F, 0x3C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03A1(Ρ) greek capital letter rho
            new byte[] { 0xFC, 0xC1, 0x3F, 0x18, 0x80, 0x01, 0x30, 0x00, 0x06, 0x60, 0x00, 0x0E, 0x60, 0x00, 0x07, 0x30, 0x80, 0x03, 0x18, 0xC0, 0x03, 0xFC, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03A3(Σ) greek capital letter sigma
            new byte[] { 0xF8, 0xC3, 0x3F, 0xE0, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03A4(Τ) greek capital letter tau
            new byte[] { 0x0C, 0xC2, 0x30, 0x18, 0x83, 0x31, 0x98, 0x01, 0x1B, 0xB0, 0x01, 0x0F, 0xE0, 0x00, 0x0E, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03A5(Υ) greek capital letter upsilon
            new byte[] { 0x40, 0x00, 0x0E, 0xF8, 0xC1, 0x3F, 0x6C, 0xC7, 0x66, 0x66, 0x66, 0x66, 0x6E, 0xC6, 0x66, 0x6C, 0xC6, 0x37, 0xF8, 0x03, 0x0F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03A6(Φ) greek capital letter phi
            new byte[] { 0x08, 0x82, 0x31, 0x98, 0x01, 0x1B, 0xB0, 0x01, 0x0F, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xB0, 0x01, 0x1B, 0x98, 0x83, 0x31, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03A7(Χ) greek capital letter chi
            new byte[] { 0x4C, 0xC6, 0x66, 0x6C, 0xE6, 0x66, 0x66, 0xE6, 0x66, 0x6C, 0xC6, 0x66, 0x6C, 0xC6, 0x3F, 0xF8, 0x01, 0x0E, 0x60, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03A8(Ψ) greek capital letter psi
            new byte[] { 0xF0, 0x80, 0x1F, 0x18, 0xC3, 0x30, 0x0C, 0xC7, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x30, 0x18, 0x83, 0x3B, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03A9(Ω) greek capital letter omega
            new byte[] { 0xF8, 0x83, 0x3F, 0xE0, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1F, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03AA(Ϊ) greek capital letter iota with dialytika
            new byte[] { 0x0C, 0xC2, 0x30, 0x18, 0x83, 0x31, 0x98, 0x01, 0x1B, 0xB0, 0x01, 0x0F, 0xE0, 0x00, 0x0E, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03AB(Ϋ) greek capital letter upsilon with dialytika
            new byte[] { 0xE0, 0x00, 0x06, 0x20, 0x00, 0x00, 0x70, 0x81, 0x1F, 0x9C, 0xC3, 0x38, 0x8E, 0x63, 0x38, 0x86, 0xC3, 0x38, 0x8C, 0xC3, 0x7F, 0x78, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03AC(ά) greek small letter alpha with tonos
            new byte[] { 0xC0, 0x00, 0x06, 0x60, 0x00, 0x00, 0xE0, 0x80, 0x1F, 0x18, 0x80, 0x01, 0xF8, 0x00, 0x0F, 0x18, 0xC0, 0x00, 0x0C, 0x80, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03AD(έ) greek small letter epsilon with tonos
            new byte[] { 0xC0, 0x00, 0x06, 0x60, 0x00, 0x00, 0x80, 0xC0, 0x3F, 0x38, 0x83, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x00}, //03AE(ή) greek small letter eta with tonos
            new byte[] { 0x60, 0x00, 0x06, 0x20, 0x00, 0x00, 0x38, 0xC0, 0x07, 0x70, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1E, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03AF(ί) greek small letter iota with tonos
            new byte[] { 0xFC, 0x03, 0x06, 0x00, 0x00, 0x00, 0x08, 0xC2, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x18, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03B0(ΰ) greek small letter upsilon with dialytika and tonos
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x81, 0x1F, 0x9C, 0xC3, 0x38, 0x8E, 0x63, 0x38, 0x86, 0xC3, 0x38, 0x8C, 0xC3, 0x7F, 0x78, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03B1(α) greek small letter alpha
            new byte[] { 0xF8, 0x81, 0x19, 0x0C, 0xC3, 0x30, 0x8C, 0xC1, 0x1C, 0xEC, 0xC0, 0x1C, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x1F, 0xFC, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x00, 0x00, 0x00}, //03B2(β) greek small letter beta
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0xC2, 0x30, 0x18, 0x83, 0x31, 0x98, 0x01, 0x1B, 0xB0, 0x01, 0x0F, 0xE0, 0x00, 0x0E, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x40, 0x00, 0x00}, //03B3(γ) greek small letter gamma
            new byte[] { 0xF8, 0x83, 0x11, 0x18, 0x80, 0x03, 0x70, 0x00, 0x1F, 0xB8, 0xC3, 0x31, 0x0C, 0xC7, 0x60, 0x0C, 0xC6, 0x70, 0x1C, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03B4(δ) greek small letter delta
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x1F, 0x18, 0x80, 0x01, 0xF8, 0x00, 0x0F, 0x18, 0xC0, 0x00, 0x0C, 0x80, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03B5(ε) greek small letter epsilon
            new byte[] { 0xF8, 0x03, 0x1C, 0xE0, 0x00, 0x06, 0x30, 0x80, 0x03, 0x18, 0x80, 0x01, 0x1C, 0xC0, 0x01, 0x1C, 0x80, 0x03, 0xF0, 0x00, 0x3C, 0x00, 0x03, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00}, //03B6(ζ) greek small letter zeta
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x3F, 0x38, 0x83, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x00}, //03B7(η) greek small letter eta
            new byte[] { 0xE0, 0x80, 0x1F, 0x98, 0x83, 0x31, 0x0C, 0xC3, 0x30, 0x1C, 0xC3, 0x3F, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x18, 0x83, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03B8(θ) greek small letter theta
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xC0, 0x07, 0x70, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1E, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03B9(ι) greek small letter iota
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x18, 0xCC, 0xC0, 0x06, 0x7C, 0xC0, 0x07, 0xEC, 0xC0, 0x1C, 0x8C, 0xC3, 0x30, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03BA(κ) greek small letter kappa
            new byte[] { 0x18, 0x80, 0x03, 0x30, 0x00, 0x03, 0x70, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0xF8, 0x81, 0x19, 0x98, 0x81, 0x31, 0x0C, 0xC3, 0x70, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03BB(λ) greek small letter lamda
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xC1, 0x18, 0x8C, 0xC1, 0x18, 0x8C, 0xC1, 0x18, 0x8C, 0xC1, 0x18, 0x8C, 0xC3, 0x7F, 0x7C, 0xC6, 0x00, 0x0C, 0xC0, 0x00, 0x04, 0x00, 0x00}, //03BC(μ) greek small letter mu
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x70, 0x1C, 0x83, 0x31, 0x98, 0x83, 0x1B, 0xB0, 0x01, 0x1F, 0xE0, 0x00, 0x0E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03BD(ν) greek small letter nu
            new byte[] { 0xF0, 0x83, 0x03, 0x18, 0x80, 0x01, 0xF0, 0x01, 0x0F, 0x38, 0xC0, 0x01, 0x0C, 0xC0, 0x00, 0x1C, 0x80, 0x01, 0xF0, 0x00, 0x3E, 0x00, 0x03, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00}, //03BE(ξ) greek small letter xi
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x1F, 0x18, 0xC3, 0x30, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x1C, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03BF(ο) greek small letter omicron
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xE3, 0x7F, 0x98, 0x83, 0x19, 0x98, 0x81, 0x19, 0x98, 0x81, 0x19, 0x98, 0x83, 0x71, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03C0(π) greek small letter pi
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x1F, 0x98, 0xC3, 0x30, 0x0C, 0xC3, 0x70, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x1D, 0xFC, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0x00, 0x00}, //03C1(ρ) greek small letter rho
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x38, 0x80, 0x01, 0x18, 0x80, 0x01, 0x18, 0x00, 0x07, 0xE0, 0x00, 0x1C, 0x80, 0x03, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00}, //03C2(ς) greek small letter final sigma
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x87, 0x7F, 0x8C, 0xC1, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0x83, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03C3(σ) greek small letter sigma
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xC1, 0x3F, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1E, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03C4(τ) greek small letter tau
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xC2, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x18, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03C5(υ) greek small letter upsilon
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x3D, 0x6C, 0xC3, 0x66, 0x6C, 0xE6, 0x66, 0x6C, 0xC6, 0x66, 0x6C, 0x87, 0x3F, 0xF0, 0x01, 0x0E, 0x60, 0x00, 0x06, 0x40, 0x00, 0x00}, //03C6(φ) greek small letter phi
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x82, 0x31, 0x98, 0x01, 0x1B, 0xF0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0F, 0xB0, 0x81, 0x19, 0x18, 0xC3, 0x31, 0x0C, 0x02, 0x00}, //03C7(χ) greek small letter chi
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0xC2, 0x66, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xC6, 0x66, 0x6C, 0x87, 0x3F, 0xF0, 0x01, 0x0E, 0x60, 0x00, 0x06, 0x40, 0x00, 0x00}, //03C8(ψ) greek small letter psi
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x81, 0x39, 0x0C, 0xC3, 0x66, 0x6C, 0x66, 0x66, 0x66, 0xE6, 0x66, 0xEC, 0xC6, 0x7F, 0xB8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03C9(ω) greek small letter omega
            new byte[] { 0xB8, 0x83, 0x19, 0x00, 0x00, 0x00, 0x38, 0xC0, 0x07, 0x70, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x1E, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03CA(ϊ) greek small letter iota with dialytika
            new byte[] { 0xB8, 0x83, 0x19, 0x00, 0x00, 0x00, 0x08, 0xC2, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x18, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03CB(ϋ) greek small letter upsilon with dialytika
            new byte[] { 0xC0, 0x00, 0x06, 0x60, 0x00, 0x00, 0xE0, 0x80, 0x1F, 0x18, 0xC3, 0x30, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x1C, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03CC(ό) greek small letter omicron with tonos
            new byte[] { 0xC0, 0x00, 0x06, 0x60, 0x00, 0x00, 0x08, 0xC2, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x0C, 0xC3, 0x30, 0x18, 0x83, 0x3F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03CD(ύ) greek small letter upsilon with tonos
            new byte[] { 0xC0, 0x00, 0x06, 0x60, 0x00, 0x00, 0x18, 0x81, 0x39, 0x0C, 0xC3, 0x66, 0x6C, 0x66, 0x66, 0x66, 0xE6, 0x66, 0xEC, 0xC6, 0x7F, 0xB8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //03CE(ώ) greek small letter omega with tonos
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2013(–) en dash
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2014(—) em dash
            new byte[] { 0xE0, 0x00, 0x06, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2018(‘) left single quotation mark
            new byte[] { 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2019(’) right single quotation mark
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x0E, 0x60, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //201A(‚) single low-9 quotation mark
            new byte[] { 0xB8, 0x83, 0x1B, 0xD8, 0x81, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //201C(“) left double quotation mark
            new byte[] { 0xB0, 0x83, 0x3B, 0xB8, 0x81, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //201D(”) right double quotation mark
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x81, 0x3B, 0xB8, 0x81, 0x1D, 0x98, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //201E(„) double low-9 quotation mark
            new byte[] { 0x60, 0x00, 0x06, 0x60, 0x00, 0x0F, 0xFC, 0x07, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2020(†) dagger
            new byte[] { 0x60, 0x00, 0x06, 0x60, 0x00, 0x0F, 0xFC, 0x07, 0x06, 0x60, 0x00, 0x06, 0x60, 0xC0, 0x7F, 0xFC, 0x03, 0x06, 0x60, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2021(‡) double dagger
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x1F, 0xF8, 0x81, 0x1F, 0xF0, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2022(•) bullet
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFE, 0xFF, 0xEE, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2026(…) horizontal ellipsis
            new byte[] { 0x00, 0xC0, 0x0F, 0xFE, 0xE0, 0x07, 0x7E, 0xE0, 0x07, 0x3E, 0xC0, 0x03, 0xF0, 0x87, 0x7F, 0xF8, 0x87, 0x5F, 0xFC, 0xC7, 0x7E, 0xE4, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2030(‰) per mille sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xC0, 0x00, 0x0E, 0x60, 0x00, 0x07, 0x70, 0x00, 0x07, 0xE0, 0x00, 0x0C, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2039(‹) single left-pointing angle quotation mark
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x70, 0x00, 0x06, 0xC0, 0x00, 0x1C, 0xC0, 0x01, 0x0C, 0xE0, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //203A(›) single right-pointing angle quotation mark
            new byte[] { 0x00, 0x00, 0x7E, 0x38, 0x80, 0x01, 0x1C, 0xC0, 0x01, 0xFE, 0xC1, 0x00, 0xFE, 0xE0, 0x07, 0x0C, 0x80, 0x01, 0x38, 0x00, 0xFF, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //20AC(€) euro sign
            new byte[] { 0xFE, 0xCE, 0xEE, 0xEC, 0xCF, 0xFE, 0xEC, 0xCF, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2122(™) trade mark sign
            new byte[] { 0xF0, 0x80, 0x1F, 0x18, 0xC3, 0x30, 0x0C, 0xC7, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x60, 0x0C, 0xC6, 0x30, 0x18, 0x83, 0x3B, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2126(Ω) ohm sign
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x06, 0x38, 0xC0, 0x01, 0xFE, 0xC7, 0x01, 0x38, 0x00, 0x07, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2190(←) leftwards arrow
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x0F, 0xF0, 0x81, 0x3F, 0x6C, 0x67, 0x66, 0x62, 0x04, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2191(↑) upwards arrow
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x0E, 0x80, 0x01, 0x30, 0xFE, 0x07, 0x78, 0x80, 0x03, 0x1C, 0x60, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2192(→) rightwards arrow
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x06, 0x60, 0x60, 0x46, 0x6C, 0xC6, 0x36, 0xF8, 0x03, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2193(↓) downwards arrow
            new byte[] { 0x40, 0x00, 0x0E, 0xE0, 0x00, 0x0F, 0xF0, 0x00, 0x1B, 0xB0, 0x01, 0x1B, 0x98, 0x81, 0x39, 0x18, 0x83, 0x31, 0x1C, 0xC3, 0x79, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //2206(∆) increment
 
        };

        private static readonly Dictionary<int, ushort> characterMap = new Dictionary<int, ushort>
        {
            { 0x0020, 0 }, { 0x0021, 1 }, { 0x0022, 2 }, { 0x0023, 3 }, { 0x0024, 4 }, { 0x0025, 5 }, { 0x0026, 6 }, { 0x0027, 7 }, { 0x0028, 8 }, { 0x0029, 9 }, { 0x002A, 10 }, { 0x002B, 11 }, { 0x002C, 12 }, { 0x002D, 13 }, { 0x002E, 14 }, { 0x002F, 15 }, { 0x0030, 16 }, { 0x0031, 17 }, { 0x0032, 18 }, { 0x0033, 19 }, { 0x0034, 20 }, { 0x0035, 21 }, { 0x0036, 22 }, { 0x0037, 23 }, { 0x0038, 24 }, { 0x0039, 25 }, { 0x003A, 26 }, { 0x003B, 27 }, { 0x003C, 28 }, { 0x003D, 29 }, { 0x003E, 30 }, { 0x003F, 31 }, { 0x0040, 32 }, { 0x0041, 33 }, { 0x0042, 34 }, { 0x0043, 35 }, { 0x0044, 36 }, { 0x0045, 37 }, { 0x0046, 38 }, { 0x0047, 39 }, { 0x0048, 40 }, { 0x0049, 41 }, { 0x004A, 42 }, { 0x004B, 43 }, { 0x004C, 44 }, { 0x004D, 45 }, { 0x004E, 46 }, { 0x004F, 47 }, { 0x0050, 48 }, { 0x0051, 49 }, { 0x0052, 50 }, { 0x0053, 51 }, { 0x0054, 52 }, { 0x0055, 53 }, { 0x0056, 54 }, { 0x0057, 55 }, { 0x0058, 56 }, { 0x0059, 57 }, { 0x005A, 58 }, { 0x005B, 59 }, { 0x005C, 60 }, { 0x005D, 61 }, { 0x005E, 62 }, { 0x005F, 63 }, { 0x0060, 64 }, { 0x0061, 65 }, { 0x0062, 66 }, { 0x0063, 67 }, { 0x0064, 68 }, { 0x0065, 69 }, { 0x0066, 70 }, { 0x0067, 71 }, { 0x0068, 72 }, { 0x0069, 73 }, { 0x006A, 74 }, { 0x006B, 75 }, { 0x006C, 76 }, { 0x006D, 77 }, { 0x006E, 78 }, { 0x006F, 79 }, { 0x0070, 80 }, { 0x0071, 81 }, { 0x0072, 82 }, { 0x0073, 83 }, { 0x0074, 84 }, { 0x0075, 85 }, { 0x0076, 86 }, { 0x0077, 87 }, { 0x0078, 88 }, { 0x0079, 89 }, { 0x007A, 90 }, { 0x007B, 91 }, { 0x007C, 92 }, { 0x007D, 93 }, { 0x007E, 94 }, { 0x00A3, 95 }, { 0x00A4, 96 }, { 0x00A5, 97 }, { 0x00A6, 98 }, { 0x00A7, 99 }, { 0x00A8, 100 }, { 0x00A9, 101 }, { 0x00AB, 102 }, { 0x00AC, 103 }, { 0x00AD, 104 }, { 0x00AE, 105 }, { 0x00B0, 106 }, { 0x00B1, 107 }, { 0x00B2, 108 }, { 0x00B3, 109 }, { 0x00B5, 110 }, { 0x00B6, 111 }, { 0x00B7, 112 }, { 0x00BB, 113 }, { 0x00BD, 114 }, { 0x00D7, 115 }, { 0x00F7, 116 }, { 0x0192, 117 }, { 0x0384, 118 }, { 0x0385, 119 }, { 0x0386, 120 }, { 0x0388, 121 }, { 0x0389, 122 }, { 0x038A, 123 }, { 0x038C, 124 }, { 0x038E, 125 }, { 0x038F, 126 }, { 0x0390, 127 }, { 0x0391, 128 }, { 0x0392, 129 }, { 0x0393, 130 }, { 0x0394, 131 }, { 0x0395, 132 }, { 0x0396, 133 }, { 0x0397, 134 }, { 0x0398, 135 }, { 0x0399, 136 }, { 0x039A, 137 }, { 0x039B, 138 }, { 0x039C, 139 }, { 0x039D, 140 }, { 0x039E, 141 }, { 0x039F, 142 }, { 0x03A0, 143 }, { 0x03A1, 144 }, { 0x03A3, 145 }, { 0x03A4, 146 }, { 0x03A5, 147 }, { 0x03A6, 148 }, { 0x03A7, 149 }, { 0x03A8, 150 }, { 0x03A9, 151 }, { 0x03AA, 152 }, { 0x03AB, 153 }, { 0x03AC, 154 }, { 0x03AD, 155 }, { 0x03AE, 156 }, { 0x03AF, 157 }, { 0x03B0, 158 }, { 0x03B1, 159 }, { 0x03B2, 160 }, { 0x03B3, 161 }, { 0x03B4, 162 }, { 0x03B5, 163 }, { 0x03B6, 164 }, { 0x03B7, 165 }, { 0x03B8, 166 }, { 0x03B9, 167 }, { 0x03BA, 168 }, { 0x03BB, 169 }, { 0x03BC, 170 }, { 0x03BD, 171 }, { 0x03BE, 172 }, { 0x03BF, 173 }, { 0x03C0, 174 }, { 0x03C1, 175 }, { 0x03C2, 176 }, { 0x03C3, 177 }, { 0x03C4, 178 }, { 0x03C5, 179 }, { 0x03C6, 180 }, { 0x03C7, 181 }, { 0x03C8, 182 }, { 0x03C9, 183 }, { 0x03CA, 184 }, { 0x03CB, 185 }, { 0x03CC, 186 }, { 0x03CD, 187 }, { 0x03CE, 188 }, { 0x2013, 189 }, { 0x2014, 190 }, { 0x2018, 191 }, { 0x2019, 192 }, { 0x201A, 193 }, { 0x201C, 194 }, { 0x201D, 195 }, { 0x201E, 196 }, { 0x2020, 197 }, { 0x2021, 198 }, { 0x2022, 199 }, { 0x2026, 200 }, { 0x2030, 201 }, { 0x2039, 202 }, { 0x203A, 203 }, { 0x20AC, 204 }, { 0x2122, 205 }, { 0x2126, 206 }, { 0x2190, 207 }, { 0x2191, 208 }, { 0x2192, 209 }, { 0x2193, 210 }, { 0x2206, 211 }
        };

        /// <summary>
        ///     Get the binary representation of an ASCII character from the
        ///     font table.
        /// </summary>
        /// <param name="character">Character to look up.</param>
        /// <returns>
        ///     Byte array containing the rows of pixels in the character.  Unknown byte codes will result in a space being
        ///     returned.
        /// </returns>
        public override byte[] this[char character]
        {
            get
            {
                var c = (int)character;
                if (characterMap.ContainsKey(c))
                    return _fontTable[characterMap[c]];
                else
                    return _fontTable[0];
            }
        }
    }
}
