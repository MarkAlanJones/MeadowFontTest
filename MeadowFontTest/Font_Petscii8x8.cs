using System;

namespace Meadow.Foundation.Graphics
{
    // http://www.6502.org/users/sjgray/computer/cbmchr/cbmchr.html
    // SuperPet had a 4K double size character rom - 512 characters (many are repeats)
    // it included APL as a language so it's unique characters are included
    // copyright of the bitmap is unknown
    // this implementation is copyright Mark Jones 2020 - licenced under MIT
    // this font uses Unicode mapping for the extended symbols - see comments for sites that helped
    class Petscii8x8 : IFont
    {
        private const int WIDTH = 8;
        private const int HEIGHT = 8;

        public int Width { get { return WIDTH; } }
        public int Height { get { return HEIGHT; } }

        public byte[] this[char character]
        {
            get
            {
                return getGlyph(character);
            }
        }

        /// <summary>
        ///  Map Ascii values to characters - Unicode 0020-FF3F
        /// </summary>
        /// <param name="c"></param>
        private byte[] getGlyph(char c)
        {
            switch ((ushort)c)
            {
                // space - ? 
                case ushort n when n >= 0x20 && n <= 0x3F:
                    return BlockMap(2, n - 0x20);

                // @A-Z _ 
                case ushort n when n >= 0x40 && n <= 0x5F:
                    return BlockMap(11, n - 0x40);

                // `a-z ~ square
                case ushort n when n >= 0x60 && n <= 0x7F:
                    return BlockMap(12, n - 0x60);

                case 0xA7: // Macron (top line)
                    return BlockMap(15, 0);
                case 0xA8: // Diaeresis (dots) 
                    return BlockMap(14, 1);
                case 0xB5: // micro
                    return BlockMap(9, 0x1f);

                case 0xD7: // multiply
                    return BlockMap(14, 0x1d);
                case 0xF7: // divide
                    return BlockMap(14, 11);

                case 0x02C6: // circumflex
                    return BlockMap(14, 9);
                case 0x02C7: // caron
                    return BlockMap(14, 8);

                // greek
                case 0x03B1: // alpha
                    return BlockMap(15, 1);
                case 0x03C0: // pi
                    return BlockMap(3, 0x1e);
                case 0x03F5: // epsilon
                    return BlockMap(15, 5);

                case 0x1D00: // small uppercase A
                    return BlockMap(13, 0x1b);

                // arrows
                case 0x2190:// left  
                    return BlockMap(1, 0x1f);
                case 0x2191:// up  
                    return BlockMap(1, 0x1e);
                case 0x2192:// right 
                    return BlockMap(15, 29);
                case 0x2193:// down 
                    return BlockMap(15, 21);

                // math
                case 0x2206: // increment
                    return BlockMap(15, 8);
                case 0x2207: // decrement
                    return BlockMap(15, 7);
                case 0x2218: // small open circle (ring operator)
                    return BlockMap(15, 15);
                case 0x2223: // divides or bar
                    return BlockMap(15, 13);
                case 0x2229: // intersection
                    return BlockMap(15, 3);
                case 0x222A: // union
                    return BlockMap(15, 0x16);
                case 0x223F: // sine tilda alt (shifted left)
                    return BlockMap(15, 20);
                case 0x2260: // not equal
                    return BlockMap(14, 10);
                case 0x2264: // lesser equal
                    return BlockMap(14, 4);
                case 0x2265: // greater equal
                    return BlockMap(15, 0x1e);
                case 0x2282: // subset
                    return BlockMap(15, 0x1a);
                case 0x2283: // superset
                    return BlockMap(15, 0x18);
                case 0x22A2: // right tack
                    return BlockMap(15, 0x1c);
                case 0x22A3: // left tack
                    return BlockMap(16, 0x1c);
                case 0x22A4: //tack down 
                    return BlockMap(15, 14);
                case 0x22A5: //tack up 
                    return BlockMap(15, 2);

                // APL - http://xahlee.info/comp/unicode_APL_symbols.html
                case 0x22C6:// small asterisk (Star operator)
                    return BlockMap(15, 16);
                case 0x2308: // Left Ceiling
                    return BlockMap(15, 19);
                case 0x230A: // Left Floor
                    return BlockMap(15, 4);
                case 0x2336: // I bar
                    return BlockMap(13, 0x1f);
                case 0x233D: // circle stile
                    return BlockMap(13, 18);
                case 0x233F: // slash bar
                    return BlockMap(13, 0x19);
                case 0x2339: // Quad divide
                    return BlockMap(13, 30);
                case 0x2340: // backslash bar
                    return BlockMap(13, 0x1a);
                case 0x234e: // down tack jot
                    return BlockMap(13, 0x17);
                case 0x2349: // circle backslash
                    return BlockMap(13, 19);
                case 0x234B: // Delta Stile
                    return BlockMap(13, 17);
                case 0x2352: // Del Stile
                    return BlockMap(13, 16);
                case 0x2355: // up tack jot
                    return BlockMap(13, 0x18);
                case 0x2358: // Quote underscore (but underscore is missing)
                    return BlockMap(15, 11);
                case 0x235E: //Quote Quad
                    return BlockMap(13, 28);
                case 0x235F: // Circle Star
                    return BlockMap(13, 21);
                case 0x236B: // Del Tilde
                    return BlockMap(13, 22);
                case 0x236C: //Zilde (circle line)
                    return BlockMap(13, 20);
                case 0x2371: // caret down
                    return BlockMap(13, 14);
                case 0x2372: // caret up
                    return BlockMap(13, 15);
                case 0x2373: // iota
                    return BlockMap(15, 9);
                case 0x2374: // Rho
                    return BlockMap(15, 18);
                case 0x2375: // Omega (lower)
                    return BlockMap(15, 23);
                case 0x2395: // quad
                    return BlockMap(15, 12);


                // lines 
                case 0x2500: // horizontal
                    return BlockMap(9, 2);
                case 0x2502: // vertical
                    return BlockMap(9, 1);

                // square parts - https://style64.org/petscii/
                case 0x250C:
                    return BlockMap(4, 16);
                case 0x2510:
                    return BlockMap(4, 14);
                case 0x2514:
                    return BlockMap(4, 13);
                case 0x2518:
                    return BlockMap(4, 0x1d);

                // alternate square parts
                case 0x250E:
                    return BlockMap(13, 5);
                case 0x2512:
                    return BlockMap(13, 6);
                case 0x2516:
                    return BlockMap(13, 4);
                case 0x251A:
                    return BlockMap(13, 3);

                //Box Drawing
                case 0x251c: // vr
                    return BlockMap(8, 11);
                case 0x2524: // vl
                    return BlockMap(8, 19);
                case 0x252c: //hd
                    return BlockMap(8, 18);
                case 0x2534: // hu
                    return BlockMap(8, 17);

                //Alt Box Drawing
                case 0x251E: // vr
                    return BlockMap(13, 8);
                case 0x2526: // vl
                    return BlockMap(13, 10);
                case 0x2530: //hd
                    return BlockMap(13, 9);
                case 0x2537: // hu
                    return BlockMap(13, 7);

                case 0x253c: // cross
                    return BlockMap(3, 0x1B);
                case 0x253F: // alt cross
                    return BlockMap(13, 11);

                // circle parts 
                case 0x256D: // ul
                    return BlockMap(3, 21);
                case 0x256E: // ur
                    return BlockMap(3, 9);
                case 0x256F: // lr
                    return BlockMap(3, 11);
                case 0x2570: // ll
                    return BlockMap(3, 10);

                // diagonal  
                case 0x2571:
                    return BlockMap(3, 13);

                // diagonal  
                case 0x2572:
                    return BlockMap(3, 14);

                // diagonal cross
                case 0x2573:
                    return BlockMap(3, 22);

                case 0x2592: // shade
                    return BlockMap(7, 0x1e);
                case 0x2593: // darker shade
                    return BlockMap(8, 6);

                // quadrant - http://xahlee.info/comp/unicode_drawing_shapes.html
                case 0x2596:
                    return BlockMap(4, 0x1b);
                case 0x2597:
                    return BlockMap(4, 12);
                case 0x2598:
                    return BlockMap(4, 0x1e);
                case 0x259D:
                    return BlockMap(4, 0x1c);
                case 0x259A: // two
                    return BlockMap(4, 0x1f);

                // empty small square
                case 0x25AB:
                    return BlockMap(15, 10);

                // empty diamond
                case 0x25C7:
                    return BlockMap(16, 0);

                // empty circle 
                case 0x25CB:
                    return BlockMap(3, 23);

                // circle
                case 0x25CF:
                    return BlockMap(3, 17);

                // triangle left
                case 0x25E4:
                    return BlockMap(4, 9);

                // triangle right 
                case 0x25E5:
                    return BlockMap(3, 0x1f);

                // diagonal box
                case 0x25f7:
                    return BlockMap(7, 0x1f);
                case 0x25f8:
                    return BlockMap(8, 9);

                // small square - there is many of these in this font
                case 0x25FE:
                    return BlockMap(16, 0x1f);

                // card suits
                case 0x2660: // spade
                    return BlockMap(3, 1);
                case 0x2663: // club
                    return BlockMap(3, 24);
                case 0x2665: // heart
                    return BlockMap(3, 19);
                case 0x2666: // diamond
                    return BlockMap(3, 26);

                case 0x2713: // check
                    return BlockMap(8, 26);

                // Vertical and Horizontal Lines and custom mappings - https://dflund.se/~triad/krad/recode/petscii_c64en_uc.txt
                case 0x2501: // DRAWINGS LIGHT HORIZONTAL
                    return BlockMap(3, 0);
                case 0x2581: //LOWER ONE EIGHTH BLOCK
                    return BlockMap(4, 4);
                case 0x2582: //LOWER ONE QUARTER BLOC
                    return BlockMap(4, 15);
                case 0x2584: // LOWER HALF BLOCK
                    return BlockMap(4, 2);
                case 0x258C: //LEFT HALF BLOCK
                    return BlockMap(4, 1);

                case 0x2583: //LOWER THREE EIGHTHS BLOCK
                    return BlockMap(4, 25);
                case 0x258D: //LEFT THREE EIGTHS BLOCK
                    return BlockMap(4, 21);
                case 0x258E: //LEFT ONE QUARTER BLOCK
                    return BlockMap(4, 20);
                case 0x258F: //LEFT ONE EIGHTH BLOCK
                    return BlockMap(4, 5);
                case 0x2594: // UPPER ONE EIGHTH BLOCK
                    return BlockMap(4, 3);
                case 0x2595: //RIGHT ONE EIGHTH BLOCK
                    return BlockMap(4, 7);

                case 0xF121: // DRAWINGS LIGHT HORIZONTAL(CUS)
                    return BlockMap(3, 3);
                case 0xF122: // DRAWINGS LIGHT HORIZONTAL ONE QUARTER UP (CUS)
                    return BlockMap(3, 4);
                case 0xF123: // DRAWINGS LIGHT HORIZONTAL TWO QUARTERS UP (CUS)
                    return BlockMap(3, 5);
                case 0xF124: // DRAWINGS LIGHT HORIZONTAL ONE QUARTER DOWN (CUS)
                    return BlockMap(3, 6);
                case 0xF125: // DRAWINGS LIGHT HORIZONTAL TWO QUARTERS DOWN (CUS)
                    return BlockMap(3, 18);
                case 0xF126: // DRAWINGS LIGHT VERTICAL ONE QUARTER LEFT (CUS)
                    return BlockMap(3, 7);
                case 0xF127: // DRAWINGS LIGHT VERTICAL TWO QUARTERS LEFT (CUS)
                    return BlockMap(3, 20);
                case 0xF128: // DRAWINGS LIGHT VERTICAL ONE QUARTER RIGHT (CUS)
                    return BlockMap(3, 8);
                case 0xF129: // DRAWINGS LIGHT VERTICAL TWO QUARTERS RIGHT (CUS)
                    return BlockMap(3, 25);
                case 0xF12A: // EIGHTH BLOCK UP AND RIGHT (CUS)
                    return BlockMap(3, 12);
                case 0xF12B: //	EIGHTH BLOCK DOWN AND RIGHT (CUS)
                    return BlockMap(3, 15);
                case 0xF12C: //EIGHTH BLOCK DOWN AND LEFT (CUS)
                    return BlockMap(3, 16);
                case 0xF12D: //ONE EIGHTH BLOCK UP AND LEFT (CUS)
                    return BlockMap(4, 26);
                case 0xF12E: //LEFT HALF BLOCK MEDIUM SHADE (CUS)
                    return BlockMap(3, 28);
                case 0xF12F: //LOWER HALF BLOCK MEDIUM SHADE (CUS)
                    return BlockMap(4, 8);
                case 0xF130: //RIGHT ONE QUARTER BLOCK (CUS)
                    return BlockMap(4, 10);
                case 0xF131: //RIGHT THREE EIGHTHS BLOCK (CUS)
                    return BlockMap(4, 22);
                case 0xF132: //UPPER ONE QUARTER BLOCK (CUS)
                    return BlockMap(4, 23);
                case 0xF133: //UPPER THREE EIGHTS BLOCK (CUS)
                    return BlockMap(4, 24);

                case 0xFE62: // small +
                    return BlockMap(14, 13);
                case 0xFE63: // small -
                    return BlockMap(15, 31);
                case 0xFE64: // small <
                    return BlockMap(14, 3);
                case 0xFE65: // small >
                    return BlockMap(14, 6);
                case 0xFE66: // small =
                    return BlockMap(14, 5);
                case 0xFF3B: // fullwidth [ (ours is smaller)
                    return BlockMap(14, 0x1b);
                case 0xFF3D: // fullwidth ] (ours is smaller)
                    return BlockMap(14, 7);
                case 0xFF3F: // fullwidth _ (ours is smaller)
                    return BlockMap(15, 6);


                // blank for unprintable
                default:
                    return BlockMap(2, 0);
            }
        }

        private byte[] BlockMap(int block, int offset)
        {
            var result = new byte[HEIGHT];
            var raw = _fontTable[((block - 1) * 32) + offset];

            for (int b = 0; b < raw.Length; b++)
                result[b] = Reverse(raw[b]);

            return result;
        }

        private static readonly byte[][] _fontTable = {

            // block 1
            new byte[] { 0x1C, 0x22, 0x4A, 0x56, 0x4C, 0x20, 0x1E, 0x00 }, //  '@' 40 
            new byte[] { 0x18, 0x24, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00 }, //  'A' 41 
            new byte[] { 0x7C, 0x22, 0x22, 0x3C, 0x22, 0x22, 0x7C, 0x00 }, //  'B' 42 
            new byte[] { 0x1C, 0x22, 0x40, 0x40, 0x40, 0x22, 0x1C, 0x00 }, //  'C' 43 
            new byte[] { 0x78, 0x24, 0x22, 0x22, 0x22, 0x24, 0x78, 0x00 }, //  'D' 44 
            new byte[] { 0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x7E, 0x00 }, //  'E' 45 
            new byte[] { 0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x40, 0x00 }, //  'F' 46 
            new byte[] { 0x1C, 0x22, 0x40, 0x4E, 0x42, 0x22, 0x1C, 0x00 }, //  'G' 47 
            new byte[] { 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00 }, //  'H' 48 
            new byte[] { 0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00 }, //  'I' 49 
            new byte[] { 0x0E, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00 }, //  'J' 4A 
            new byte[] { 0x42, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00 }, //  'K' 4B 
            new byte[] { 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00 }, //  'L' 4C 
            new byte[] { 0x42, 0x66, 0x5A, 0x5A, 0x42, 0x42, 0x42, 0x00 }, //  'M' 4D 
            new byte[] { 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x42, 0x00 }, //  'N' 4E 
            new byte[] { 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00 }, //  'O' 4F 
            new byte[] { 0x7C, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40, 0x00 }, //  'P' 50 
            new byte[] { 0x18, 0x24, 0x42, 0x42, 0x4A, 0x24, 0x1A, 0x00 }, //  'Q' 51 
            new byte[] { 0x7C, 0x42, 0x42, 0x7C, 0x48, 0x44, 0x42, 0x00 }, //  'R' 52 
            new byte[] { 0x3C, 0x42, 0x40, 0x3C, 0x02, 0x42, 0x3C, 0x00 }, //  'S' 53 
            new byte[] { 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, //  'T' 54 
            new byte[] { 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00 }, //  'U' 55 
            new byte[] { 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x18, 0x00 }, //  'V' 56 
            new byte[] { 0x42, 0x42, 0x42, 0x5A, 0x5A, 0x66, 0x42, 0x00 }, //  'W' 57 
            new byte[] { 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x00 }, //  'X' 58 
            new byte[] { 0x22, 0x22, 0x22, 0x1C, 0x08, 0x08, 0x08, 0x00 }, //  'Y' 59 
            new byte[] { 0x7E, 0x02, 0x04, 0x18, 0x20, 0x40, 0x7E, 0x00 }, //  'Z' 5A 
            new byte[] { 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x00 }, //  '[' 5B 
            new byte[] { 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 }, //  '\' 5C 
            new byte[] { 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x3C, 0x00 }, //  ']' 5D 
            new byte[] { 0x00, 0x08, 0x1C, 0x2A, 0x08, 0x08, 0x08, 0x08 }, //  '^' 5E up
            new byte[] { 0x00, 0x00, 0x10, 0x20, 0x7F, 0x20, 0x10, 0x00 }, //  '_' 5F left

            // block 2
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  ' ' 20 
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00 }, //  '!' 21 
            new byte[] { 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  '"' 22 
            new byte[] { 0x24, 0x24, 0x7E, 0x24, 0x7E, 0x24, 0x24, 0x00 }, //  '#' 23 
            new byte[] { 0x08, 0x1E, 0x28, 0x1C, 0x0A, 0x3C, 0x08, 0x00 }, //  '$' 24 
            new byte[] { 0x00, 0x62, 0x64, 0x08, 0x10, 0x26, 0x46, 0x00 }, //  '%' 25 
            new byte[] { 0x30, 0x48, 0x48, 0x30, 0x4A, 0x44, 0x3A, 0x00 }, //  '&' 26 
            new byte[] { 0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  ''' 27 
            new byte[] { 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00 }, //  '(' 28 
            new byte[] { 0x20, 0x10, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00 }, //  ')' 29 
            new byte[] { 0x08, 0x2A, 0x1C, 0x3E, 0x1C, 0x2A, 0x08, 0x00 }, //  '*' 2A 
            new byte[] { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00 }, //  '+' 2B 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10 }, //  ',' 2C 
            new byte[] { 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00 }, //  '-' 2D 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 }, //  '.' 2E 
            new byte[] { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00 }, //  '/' 2F 
            new byte[] { 0x3C, 0x42, 0x46, 0x5A, 0x62, 0x42, 0x3C, 0x00 }, //  '0' 30 
            new byte[] { 0x08, 0x18, 0x28, 0x08, 0x08, 0x08, 0x3E, 0x00 }, //  '1' 31 
            new byte[] { 0x3C, 0x42, 0x02, 0x0C, 0x30, 0x40, 0x7E, 0x00 }, //  '2' 32 
            new byte[] { 0x3C, 0x42, 0x02, 0x1C, 0x02, 0x42, 0x3C, 0x00 }, //  '3' 33 
            new byte[] { 0x04, 0x0C, 0x14, 0x24, 0x7E, 0x04, 0x04, 0x00 }, //  '4' 34 
            new byte[] { 0x7E, 0x40, 0x78, 0x04, 0x02, 0x44, 0x38, 0x00 }, //  '5' 35 
            new byte[] { 0x1C, 0x20, 0x40, 0x7C, 0x42, 0x42, 0x3C, 0x00 }, //  '6' 36 
            new byte[] { 0x7E, 0x42, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00 }, //  '7' 37 
            new byte[] { 0x3C, 0x42, 0x42, 0x3C, 0x42, 0x42, 0x3C, 0x00 }, //  '8' 38 
            new byte[] { 0x3C, 0x42, 0x42, 0x3E, 0x02, 0x04, 0x38, 0x00 }, //  '9' 39 
            new byte[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00 }, //  ':' 3A 
            new byte[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x10 }, //  ';' 3B 
            new byte[] { 0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00 }, //  '<' 3C 
            new byte[] { 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00 }, //  '=' 3D 
            new byte[] { 0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00 }, //  '>' 3E 
            new byte[] { 0x3C, 0x42, 0x02, 0x0C, 0x10, 0x00, 0x10, 0x00 }, //  '?' 3F 

            // block 3 - petscii 1
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00 }, //  line 5 80 
            new byte[] { 0x08, 0x1C, 0x3E, 0x7F, 0x7F, 0x1C, 0x3E, 0x00 }, //  spade  81 
            new byte[] { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 }, //  v line 82 
            new byte[] { 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00 }, //  line 4 83 
            new byte[] { 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  line 3 84 
            new byte[] { 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  line 2 85 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00 }, //  line 6 86 
            new byte[] { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 }, //  v line 87 
            new byte[] { 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, //  v line 88 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x08, 0x08 }, //  upper right circle 89 
            new byte[] { 0x08, 0x08, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00 }, //  lower left circle 8A 
            new byte[] { 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x00 }, //  lower right circle 8B 
            new byte[] { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF }, //  lower left corner 8C 
            new byte[] { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 }, //  diag 8D 
            new byte[] { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 }, //  diag 8E 
            new byte[] { 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 }, //  upper left corner 8F 
            new byte[] { 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 }, //  upper right corner 90 
            new byte[] { 0x00, 0x3C, 0x7E, 0x7E, 0x7E, 0x7E, 0x3C, 0x00 }, //  solid circle 91 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00 }, //  line 7 92 
            new byte[] { 0x36, 0x7F, 0x7F, 0x7F, 0x3E, 0x1C, 0x08, 0x00 }, //  heart 93 
            new byte[] { 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40 }, //  v line 94 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x08 }, //  upper left circle 95 
            new byte[] { 0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81 }, //  X 96 
            new byte[] { 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00 }, //  empty circle 97 
            new byte[] { 0x08, 0x1C, 0x2A, 0x77, 0x2A, 0x08, 0x08, 0x00 }, //  club 98 
            new byte[] { 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02 }, //  v line  99 
            new byte[] { 0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00 }, //  diamond 9A 
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0xFF, 0x08, 0x08, 0x08 }, //  + 9B 
            new byte[] { 0xA0, 0x50, 0xA0, 0x50, 0xA0, 0x50, 0xA0, 0x50 }, //  block left 9C 
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 }, //  '|' 7C 
            new byte[] { 0x00, 0x00, 0x01, 0x3E, 0x54, 0x14, 0x14, 0x00 }, //  pi 9E 
            new byte[] { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 }, //  uppeer right triangle 9F 

            // block 4 - petscii 2
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  ' ' 20 
            new byte[] { 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF }, //  lower block
            new byte[] { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  top 1
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF }, //  bottom 1
            new byte[] { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 }, //   
            new byte[] { 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55 }, //   
            new byte[] { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 }, //  
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xAA, 0x55, 0xAA, 0x55 }, //  
            new byte[] { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 }, //  
            new byte[] { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 }, //   
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x08 }, //  
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F }, //  
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x0F, 0x00, 0x00, 0x00 }, //  
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xF8, 0x08, 0x08, 0x08 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF }, //  bottom 2
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x08, 0x08 }, //   
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00, 0x00, 0x00 }, //  
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xFF, 0x08, 0x08, 0x08 }, //   
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x08 }, //  
            new byte[] { 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0 }, //   
            new byte[] { 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0 }, //  
            new byte[] { 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 }, //   
            new byte[] { 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //   top 2
            new byte[] { 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00 }, //   top 3
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF }, //   bottom 3
            new byte[] { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0 }, //   
            new byte[] { 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00 }, //    
            new byte[] { 0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F }, //   

            // block 5 - lowercase 1 with block 1 duplicates at end
            new byte[] { 0x1C, 0x22, 0x4A, 0x56, 0x4C, 0x20, 0x1E, 0x00 }, //  '@' 40 
            new byte[] { 0x00, 0x00, 0x38, 0x04, 0x3C, 0x44, 0x3A, 0x00 }, //  'a' 61 
            new byte[] { 0x40, 0x40, 0x5C, 0x62, 0x42, 0x62, 0x5C, 0x00 }, //  'b' 62 
            new byte[] { 0x00, 0x00, 0x3C, 0x42, 0x40, 0x42, 0x3C, 0x00 }, //  'c' 63 
            new byte[] { 0x02, 0x02, 0x3A, 0x46, 0x42, 0x46, 0x3A, 0x00 }, //  'd' 64 
            new byte[] { 0x00, 0x00, 0x3C, 0x42, 0x7E, 0x40, 0x3C, 0x00 }, //  'e' 65 
            new byte[] { 0x0C, 0x12, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x00 }, //  'f' 66 
            new byte[] { 0x00, 0x00, 0x3A, 0x46, 0x46, 0x3A, 0x02, 0x3C }, //  'g' 67 
            new byte[] { 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x00 }, //  'h' 68 
            new byte[] { 0x08, 0x00, 0x18, 0x08, 0x08, 0x08, 0x1C, 0x00 }, //  'i' 69 
            new byte[] { 0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x44, 0x38 }, //  'j' 6A 
            new byte[] { 0x40, 0x40, 0x44, 0x48, 0x50, 0x68, 0x44, 0x00 }, //  'k' 6B 
            new byte[] { 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00 }, //  'l' 6C 
            new byte[] { 0x00, 0x00, 0x76, 0x49, 0x49, 0x49, 0x49, 0x00 }, //  'm' 6D 
            new byte[] { 0x00, 0x00, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x00 }, //  'n' 6E 
            new byte[] { 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x3C, 0x00 }, //  'o' 6F 
            new byte[] { 0x00, 0x00, 0x5C, 0x62, 0x62, 0x5C, 0x40, 0x40 }, //  'p' 70 
            new byte[] { 0x00, 0x00, 0x3A, 0x46, 0x46, 0x3A, 0x02, 0x02 }, //  'q' 71 
            new byte[] { 0x00, 0x00, 0x5C, 0x62, 0x40, 0x40, 0x40, 0x00 }, //  'r' 72 
            new byte[] { 0x00, 0x00, 0x3E, 0x40, 0x3C, 0x02, 0x7C, 0x00 }, //  's' 73 
            new byte[] { 0x10, 0x10, 0x7C, 0x10, 0x10, 0x12, 0x0C, 0x00 }, //  't' 74 
            new byte[] { 0x00, 0x00, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x00 }, //  'u' 75 
            new byte[] { 0x00, 0x00, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00 }, //  'v' 76 
            new byte[] { 0x00, 0x00, 0x41, 0x49, 0x49, 0x49, 0x36, 0x00 }, //  'w' 77 
            new byte[] { 0x00, 0x00, 0x42, 0x24, 0x18, 0x24, 0x42, 0x00 }, //  'x' 78 
            new byte[] { 0x00, 0x00, 0x42, 0x42, 0x46, 0x3A, 0x02, 0x3C }, //  'y' 79 
            new byte[] { 0x00, 0x00, 0x7E, 0x04, 0x18, 0x20, 0x7E, 0x00 }, //  'z' 7A 
            new byte[] { 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x00 }, //  '[' 5B 
            new byte[] { 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 }, //  '\' 5C 
            new byte[] { 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x3C, 0x00 }, //  ']' 5D 
            new byte[] { 0x00, 0x08, 0x1C, 0x2A, 0x08, 0x08, 0x08, 0x08 }, //  '^' 5E up
            new byte[] { 0x00, 0x00, 0x10, 0x20, 0x7F, 0x20, 0x10, 0x00 }, //  '_' 5F left

            // block 6 - Repeat of block 2
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  ' ' 20 
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00 }, //  '!' 21 
            new byte[] { 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  '"' 22 
            new byte[] { 0x24, 0x24, 0x7E, 0x24, 0x7E, 0x24, 0x24, 0x00 }, //  '#' 23 
            new byte[] { 0x08, 0x1E, 0x28, 0x1C, 0x0A, 0x3C, 0x08, 0x00 }, //  '$' 24 
            new byte[] { 0x00, 0x62, 0x64, 0x08, 0x10, 0x26, 0x46, 0x00 }, //  '%' 25 
            new byte[] { 0x30, 0x48, 0x48, 0x30, 0x4A, 0x44, 0x3A, 0x00 }, //  '&' 26 
            new byte[] { 0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  ''' 27 
            new byte[] { 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00 }, //  '(' 28 
            new byte[] { 0x20, 0x10, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00 }, //  ')' 29 
            new byte[] { 0x08, 0x2A, 0x1C, 0x3E, 0x1C, 0x2A, 0x08, 0x00 }, //  '*' 2A 
            new byte[] { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00 }, //  '+' 2B 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10 }, //  ',' 2C 
            new byte[] { 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00 }, //  '-' 2D 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 }, //  '.' 2E 
            new byte[] { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00 }, //  '/' 2F 
            new byte[] { 0x3C, 0x42, 0x46, 0x5A, 0x62, 0x42, 0x3C, 0x00 }, //  '0' 30 
            new byte[] { 0x08, 0x18, 0x28, 0x08, 0x08, 0x08, 0x3E, 0x00 }, //  '1' 31 
            new byte[] { 0x3C, 0x42, 0x02, 0x0C, 0x30, 0x40, 0x7E, 0x00 }, //  '2' 32 
            new byte[] { 0x3C, 0x42, 0x02, 0x1C, 0x02, 0x42, 0x3C, 0x00 }, //  '3' 33 
            new byte[] { 0x04, 0x0C, 0x14, 0x24, 0x7E, 0x04, 0x04, 0x00 }, //  '4' 34 
            new byte[] { 0x7E, 0x40, 0x78, 0x04, 0x02, 0x44, 0x38, 0x00 }, //  '5' 35 
            new byte[] { 0x1C, 0x20, 0x40, 0x7C, 0x42, 0x42, 0x3C, 0x00 }, //  '6' 36 
            new byte[] { 0x7E, 0x42, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00 }, //  '7' 37 
            new byte[] { 0x3C, 0x42, 0x42, 0x3C, 0x42, 0x42, 0x3C, 0x00 }, //  '8' 38 
            new byte[] { 0x3C, 0x42, 0x42, 0x3E, 0x02, 0x04, 0x38, 0x00 }, //  '9' 39 
            new byte[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00 }, //  ':' 3A 
            new byte[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x10 }, //  ';' 3B 
            new byte[] { 0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00 }, //  '<' 3C 
            new byte[] { 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00 }, //  '=' 3D 
            new byte[] { 0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00 }, //  '>' 3E 
            new byte[] { 0x3C, 0x42, 0x02, 0x0C, 0x10, 0x00, 0x10, 0x00 }, //  '?' 3F 

            // block 7 - uppercase 2
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00 }, //  line 5
            new byte[] { 0x18, 0x24, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00 }, //  'A' 41 
            new byte[] { 0x7C, 0x22, 0x22, 0x3C, 0x22, 0x22, 0x7C, 0x00 }, //  'B' 42 
            new byte[] { 0x1C, 0x22, 0x40, 0x40, 0x40, 0x22, 0x1C, 0x00 }, //  'C' 43 
            new byte[] { 0x78, 0x24, 0x22, 0x22, 0x22, 0x24, 0x78, 0x00 }, //  'D' 44 
            new byte[] { 0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x7E, 0x00 }, //  'E' 45 
            new byte[] { 0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x40, 0x00 }, //  'F' 46 
            new byte[] { 0x1C, 0x22, 0x40, 0x4E, 0x42, 0x22, 0x1C, 0x00 }, //  'G' 47 
            new byte[] { 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00 }, //  'H' 48 
            new byte[] { 0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00 }, //  'I' 49 
            new byte[] { 0x0E, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00 }, //  'J' 4A 
            new byte[] { 0x42, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00 }, //  'K' 4B 
            new byte[] { 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00 }, //  'L' 4C 
            new byte[] { 0x42, 0x66, 0x5A, 0x5A, 0x42, 0x42, 0x42, 0x00 }, //  'M' 4D 
            new byte[] { 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x42, 0x00 }, //  'N' 4E 
            new byte[] { 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00 }, //  'O' 4F 
            new byte[] { 0x7C, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40, 0x00 }, //  'P' 50 
            new byte[] { 0x18, 0x24, 0x42, 0x42, 0x4A, 0x24, 0x1A, 0x00 }, //  'Q' 51 
            new byte[] { 0x7C, 0x42, 0x42, 0x7C, 0x48, 0x44, 0x42, 0x00 }, //  'R' 52 
            new byte[] { 0x3C, 0x42, 0x40, 0x3C, 0x02, 0x42, 0x3C, 0x00 }, //  'S' 53 
            new byte[] { 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, //  'T' 54 
            new byte[] { 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00 }, //  'U' 55 
            new byte[] { 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x18, 0x00 }, //  'V' 56 
            new byte[] { 0x42, 0x42, 0x42, 0x5A, 0x5A, 0x66, 0x42, 0x00 }, //  'W' 57 
            new byte[] { 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x00 }, //  'X' 58 
            new byte[] { 0x22, 0x22, 0x22, 0x1C, 0x08, 0x08, 0x08, 0x00 }, //  'Y' 59 
            new byte[] { 0x7E, 0x02, 0x04, 0x18, 0x20, 0x40, 0x7E, 0x00 }, //  'Z' 5A 
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0xFF, 0x08, 0x08, 0x08 }, //   + 9B
            new byte[] { 0xA0, 0x50, 0xA0, 0x50, 0xA0, 0x50, 0xA0, 0x50 }, //   
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 }, //  '|' 7C 
            new byte[] { 0xCC, 0xCC, 0x33, 0x33, 0xCC, 0xCC, 0x33, 0x33 }, //   
            new byte[] { 0xCC, 0x66, 0x33, 0x99, 0xCC, 0x66, 0x33, 0x99 }, //   

            // block 8 - copy of block 4 except 2 characters
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  ' ' 20    
            new byte[] { 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF }, // lower block  
            new byte[] { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  top 1 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF }, //  bottom 1 
            new byte[] { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 }, //  
            new byte[] { 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55 }, //   
            new byte[] { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xAA, 0x55, 0xAA, 0x55 }, //   
            new byte[] { 0x99, 0x33, 0x66, 0xCC, 0x99, 0x33, 0x66, 0xCC }, // diagonal stripes  
            new byte[] { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 }, //   
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x08 }, //    
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F }, //   
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x0F, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xF8, 0x08, 0x08, 0x08 }, //    
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF }, //  bottom 2 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x08, 0x08 }, //  
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00, 0x00, 0x00 }, //  
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xFF, 0x08, 0x08, 0x08 }, //    
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x08 }, //   
            new byte[] { 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0 }, //   
            new byte[] { 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0 }, //   
            new byte[] { 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 }, //   
            new byte[] { 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //   top 2
            new byte[] { 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00 }, //   top 3
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF }, //  bottom 3
            new byte[] { 0x01, 0x02, 0x44, 0x48, 0x50, 0x60, 0x40, 0x00 }, // check or root  
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0 }, //  
            new byte[] { 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F }, //   

            // block 9 - squares lines - half is same lower square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, // square  
            new byte[] { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x10, 0x10, 0x10, 0xF0, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x10, 0x10, 0x10, 0x1F, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0xF0, 0x10, 0x10, 0x10, 0x10 }, //  
            new byte[] { 0x10, 0x10, 0x10, 0xFF, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x10, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x10, 0x10 }, //  
            new byte[] { 0x00, 0x00, 0x00, 0xFF, 0x10, 0x10, 0x10, 0x10 }, //   
            new byte[] { 0x10, 0x10, 0x10, 0xF0, 0x10, 0x10, 0x10, 0x10 }, //   
            new byte[] { 0x10, 0x10, 0x10, 0xFF, 0x10, 0x10, 0x10, 0x10 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x24, 0x24, 0x24, 0x3A, 0x20, 0x40 }, //  micro

            // block 10 - repeat of 6 and 2
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  ' ' 20 
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00 }, //  '!' 21 
            new byte[] { 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  '"' 22 
            new byte[] { 0x24, 0x24, 0x7E, 0x24, 0x7E, 0x24, 0x24, 0x00 }, //  '#' 23 
            new byte[] { 0x08, 0x1E, 0x28, 0x1C, 0x0A, 0x3C, 0x08, 0x00 }, //  '$' 24 
            new byte[] { 0x00, 0x62, 0x64, 0x08, 0x10, 0x26, 0x46, 0x00 }, //  '%' 25 
            new byte[] { 0x30, 0x48, 0x48, 0x30, 0x4A, 0x44, 0x3A, 0x00 }, //  '&' 26 
            new byte[] { 0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  ''' 27 
            new byte[] { 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00 }, //  '(' 28 
            new byte[] { 0x20, 0x10, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00 }, //  ')' 29 
            new byte[] { 0x08, 0x2A, 0x1C, 0x3E, 0x1C, 0x2A, 0x08, 0x00 }, //  '*' 2A 
            new byte[] { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00 }, //  '+' 2B 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10 }, //  ',' 2C 
            new byte[] { 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00 }, //  '-' 2D 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 }, //  '.' 2E 
            new byte[] { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00 }, //  '/' 2F 
            new byte[] { 0x3C, 0x42, 0x46, 0x5A, 0x62, 0x42, 0x3C, 0x00 }, //  '0' 30 
            new byte[] { 0x08, 0x18, 0x28, 0x08, 0x08, 0x08, 0x3E, 0x00 }, //  '1' 31 
            new byte[] { 0x3C, 0x42, 0x02, 0x0C, 0x30, 0x40, 0x7E, 0x00 }, //  '2' 32 
            new byte[] { 0x3C, 0x42, 0x02, 0x1C, 0x02, 0x42, 0x3C, 0x00 }, //  '3' 33 
            new byte[] { 0x04, 0x0C, 0x14, 0x24, 0x7E, 0x04, 0x04, 0x00 }, //  '4' 34 
            new byte[] { 0x7E, 0x40, 0x78, 0x04, 0x02, 0x44, 0x38, 0x00 }, //  '5' 35 
            new byte[] { 0x1C, 0x20, 0x40, 0x7C, 0x42, 0x42, 0x3C, 0x00 }, //  '6' 36 
            new byte[] { 0x7E, 0x42, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00 }, //  '7' 37 
            new byte[] { 0x3C, 0x42, 0x42, 0x3C, 0x42, 0x42, 0x3C, 0x00 }, //  '8' 38 
            new byte[] { 0x3C, 0x42, 0x42, 0x3E, 0x02, 0x04, 0x38, 0x00 }, //  '9' 39 
            new byte[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00 }, //  ':' 3A 
            new byte[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x10 }, //  ';' 3B 
            new byte[] { 0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00 }, //  '<' 3C 
            new byte[] { 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00 }, //  '=' 3D 
            new byte[] { 0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00 }, //  '>' 3E 
            new byte[] { 0x3C, 0x42, 0x02, 0x0C, 0x10, 0x00, 0x10, 0x00 }, //  '?' 3F 

            // block 11 - like block 1 with proper ascii for last 2
            new byte[] { 0x1C, 0x22, 0x4A, 0x56, 0x4C, 0x20, 0x1E, 0x00 }, //  '@' 40 
            new byte[] { 0x18, 0x24, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00 }, //  'A' 41 
            new byte[] { 0x7C, 0x22, 0x22, 0x3C, 0x22, 0x22, 0x7C, 0x00 }, //  'B' 42 
            new byte[] { 0x1C, 0x22, 0x40, 0x40, 0x40, 0x22, 0x1C, 0x00 }, //  'C' 43 
            new byte[] { 0x78, 0x24, 0x22, 0x22, 0x22, 0x24, 0x78, 0x00 }, //  'D' 44 
            new byte[] { 0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x7E, 0x00 }, //  'E' 45 
            new byte[] { 0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x40, 0x00 }, //  'F' 46 
            new byte[] { 0x1C, 0x22, 0x40, 0x4E, 0x42, 0x22, 0x1C, 0x00 }, //  'G' 47 
            new byte[] { 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00 }, //  'H' 48 
            new byte[] { 0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00 }, //  'I' 49 
            new byte[] { 0x0E, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00 }, //  'J' 4A 
            new byte[] { 0x42, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00 }, //  'K' 4B 
            new byte[] { 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00 }, //  'L' 4C 
            new byte[] { 0x42, 0x66, 0x5A, 0x5A, 0x42, 0x42, 0x42, 0x00 }, //  'M' 4D 
            new byte[] { 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x42, 0x00 }, //  'N' 4E 
            new byte[] { 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00 }, //  'O' 4F 
            new byte[] { 0x7C, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40, 0x00 }, //  'P' 50 
            new byte[] { 0x18, 0x24, 0x42, 0x42, 0x4A, 0x24, 0x1A, 0x00 }, //  'Q' 51 
            new byte[] { 0x7C, 0x42, 0x42, 0x7C, 0x48, 0x44, 0x42, 0x00 }, //  'R' 52 
            new byte[] { 0x3C, 0x42, 0x40, 0x3C, 0x02, 0x42, 0x3C, 0x00 }, //  'S' 53 
            new byte[] { 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, //  'T' 54 
            new byte[] { 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00 }, //  'U' 55 
            new byte[] { 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x18, 0x00 }, //  'V' 56 
            new byte[] { 0x42, 0x42, 0x42, 0x5A, 0x5A, 0x66, 0x42, 0x00 }, //  'W' 57 
            new byte[] { 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x00 }, //  'X' 58 
            new byte[] { 0x22, 0x22, 0x22, 0x1C, 0x08, 0x08, 0x08, 0x00 }, //  'Y' 59 
            new byte[] { 0x7E, 0x02, 0x04, 0x18, 0x20, 0x40, 0x7E, 0x00 }, //  'Z' 5A 
            new byte[] { 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x00 }, //  '[' 5B 
            new byte[] { 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 }, //  '\' 5C 
            new byte[] { 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x3C, 0x00 }, //  ']' 5D 
            new byte[] { 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  '^' 5E
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE }, //  '_' 5F

            // block 12 - lowercase 2 
            new byte[] { 0x20, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  '`' 60 
            new byte[] { 0x00, 0x00, 0x38, 0x04, 0x3C, 0x44, 0x3A, 0x00 }, //  'a' 61 
            new byte[] { 0x40, 0x40, 0x5C, 0x62, 0x42, 0x62, 0x5C, 0x00 }, //  'b' 62 
            new byte[] { 0x00, 0x00, 0x3C, 0x42, 0x40, 0x42, 0x3C, 0x00 }, //  'c' 63 
            new byte[] { 0x02, 0x02, 0x3A, 0x46, 0x42, 0x46, 0x3A, 0x00 }, //  'd' 64 
            new byte[] { 0x00, 0x00, 0x3C, 0x42, 0x7E, 0x40, 0x3C, 0x00 }, //  'e' 65 
            new byte[] { 0x0C, 0x12, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x00 }, //  'f' 66 
            new byte[] { 0x00, 0x00, 0x3A, 0x46, 0x46, 0x3A, 0x02, 0x3C }, //  'g' 67 
            new byte[] { 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x00 }, //  'h' 68 
            new byte[] { 0x08, 0x00, 0x18, 0x08, 0x08, 0x08, 0x1C, 0x00 }, //  'i' 69 
            new byte[] { 0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x44, 0x38 }, //  'j' 6A 
            new byte[] { 0x40, 0x40, 0x44, 0x48, 0x50, 0x68, 0x44, 0x00 }, //  'k' 6B 
            new byte[] { 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00 }, //  'l' 6C 
            new byte[] { 0x00, 0x00, 0x76, 0x49, 0x49, 0x49, 0x49, 0x00 }, //  'm' 6D 
            new byte[] { 0x00, 0x00, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x00 }, //  'n' 6E 
            new byte[] { 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x3C, 0x00 }, //  'o' 6F 
            new byte[] { 0x00, 0x00, 0x5C, 0x62, 0x62, 0x5C, 0x40, 0x40 }, //  'p' 70 
            new byte[] { 0x00, 0x00, 0x3A, 0x46, 0x46, 0x3A, 0x02, 0x02 }, //  'q' 71 
            new byte[] { 0x00, 0x00, 0x5C, 0x62, 0x40, 0x40, 0x40, 0x00 }, //  'r' 72 
            new byte[] { 0x00, 0x00, 0x3E, 0x40, 0x3C, 0x02, 0x7C, 0x00 }, //  's' 73 
            new byte[] { 0x10, 0x10, 0x7C, 0x10, 0x10, 0x12, 0x0C, 0x00 }, //  't' 74 
            new byte[] { 0x00, 0x00, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x00 }, //  'u' 75 
            new byte[] { 0x00, 0x00, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00 }, //  'v' 76 
            new byte[] { 0x00, 0x00, 0x41, 0x49, 0x49, 0x49, 0x36, 0x00 }, //  'w' 77 
            new byte[] { 0x00, 0x00, 0x42, 0x24, 0x18, 0x24, 0x42, 0x00 }, //  'x' 78 
            new byte[] { 0x00, 0x00, 0x42, 0x42, 0x46, 0x3A, 0x02, 0x3C }, //  'y' 79 
            new byte[] { 0x00, 0x00, 0x7E, 0x04, 0x18, 0x20, 0x7E, 0x00 }, //  'z' 7A 
            new byte[] { 0x18, 0x20, 0x20, 0x40, 0x20, 0x20, 0x18, 0x00 }, //  '{' 7B 
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 }, //  '|' 7C 
            new byte[] { 0x30, 0x08, 0x08, 0x04, 0x08, 0x08, 0x30, 0x00 }, //  '}' 7D 
            new byte[] { 0x00, 0x00, 0x00, 0x20, 0x54, 0x08, 0x00, 0x00 }, //  '~' 7E 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square

            // block 13 - copy of 9 then APL characters
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00 }, //   line 4
            new byte[] { 0x10, 0x10, 0x10, 0xF0, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x10, 0x10, 0x10, 0x1F, 0x00, 0x00, 0x00, 0x00 }, //  
            new byte[] { 0x00, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0xF0, 0x10, 0x10, 0x10, 0x10 }, //  
            new byte[] { 0x10, 0x10, 0x10, 0xFF, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x10, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x10, 0x10 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0xFF, 0x10, 0x10, 0x10, 0x10 }, //  
            new byte[] { 0x10, 0x10, 0x10, 0xF0, 0x10, 0x10, 0x10, 0x10 }, //  
            new byte[] { 0x10, 0x10, 0x10, 0xFF, 0x10, 0x10, 0x10, 0x10 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }, //  square 
            new byte[] { 0x20, 0x54, 0x08, 0x00, 0x44, 0x28, 0x10, 0x00 }, //  APL starts here ? 
            new byte[] { 0x20, 0x54, 0x08, 0x00, 0x10, 0x28, 0x44, 0x00 }, //   
            new byte[] { 0x10, 0x10, 0x7C, 0x54, 0x28, 0x10, 0x10, 0x00 }, //   
            new byte[] { 0x10, 0x10, 0x28, 0x54, 0x7C, 0x10, 0x10, 0x00 }, //    
            new byte[] { 0x10, 0x38, 0x54, 0x54, 0x54, 0x38, 0x10, 0x00 }, //   
            new byte[] { 0x80, 0x78, 0x64, 0x54, 0x4C, 0x3C, 0x02, 0x00 }, //   
            new byte[] { 0x00, 0x38, 0x44, 0xFE, 0x44, 0x38, 0x00, 0x00 }, //   
            new byte[] { 0x00, 0x38, 0x54, 0x7C, 0x54, 0x38, 0x00, 0x00 }, //   
            new byte[] { 0x20, 0x54, 0x08, 0x00, 0x7C, 0x44, 0x28, 0x10 }, //   
            new byte[] { 0x00, 0x00, 0x38, 0x28, 0x38, 0x10, 0x7C, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x7C, 0x10, 0x38, 0x28, 0x38, 0x00 }, //   
            new byte[] { 0x00, 0x40, 0x20, 0x7C, 0x08, 0x04, 0x02, 0x00 }, //   
            new byte[] { 0x00, 0x04, 0x08, 0x7C, 0x20, 0x40, 0x80, 0x00 }, //  
            new byte[] { 0x00, 0x00, 0x30, 0x48, 0x48, 0x78, 0x48, 0x00 }, //   
            new byte[] { 0x7C, 0x54, 0x54, 0x44, 0x44, 0x44, 0x7C, 0x00 }, //   
            new byte[] { 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00 }, //  '!' 21  
            new byte[] { 0x7C, 0x54, 0x44, 0x7C, 0x44, 0x54, 0x7C, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x7C, 0x10, 0x10, 0x10, 0x7C, 0x00 }, //  

            // block 14 - numbers 4
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  ' ' 20 
            new byte[] { 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x20, 0x10, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00 }, //  ')' 29  
            new byte[] { 0x00, 0x08, 0x10, 0x20, 0x10, 0x08, 0x00, 0x00 }, //  less than
            new byte[] { 0x08, 0x10, 0x20, 0x10, 0x08, 0x00, 0x38, 0x00 }, //  less than = 
            new byte[] { 0x00, 0x00, 0x7C, 0x00, 0x7C, 0x00, 0x00, 0x00 }, //  Small = 
            new byte[] { 0x00, 0x20, 0x10, 0x08, 0x10, 0x20, 0x00, 0x00 }, //  greater than
            new byte[] { 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00 }, //  small sq bracket r 
            new byte[] { 0x00, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00, 0x00 }, //  down 
            new byte[] { 0x00, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00 }, //  up 
            new byte[] { 0x04, 0x08, 0x7C, 0x10, 0x7C, 0x20, 0x40, 0x00 }, //  not eq 
            new byte[] { 0x00, 0x10, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00 }, //  divide F7
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10 }, //  ',' 2C  
            new byte[] { 0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00 }, //  small + 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00 }, //  Different .  
            new byte[] { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00 }, //  '/' 2F 
            new byte[] { 0x3C, 0x42, 0x46, 0x5A, 0x62, 0x42, 0x3C, 0x00 }, //  '0' 30 
            new byte[] { 0x08, 0x18, 0x28, 0x08, 0x08, 0x08, 0x3E, 0x00 }, //  '1' 31 
            new byte[] { 0x3C, 0x42, 0x02, 0x0C, 0x30, 0x40, 0x7E, 0x00 }, //  '2' 32 
            new byte[] { 0x3C, 0x42, 0x02, 0x1C, 0x02, 0x42, 0x3C, 0x00 }, //  '3' 33 
            new byte[] { 0x04, 0x0C, 0x14, 0x24, 0x7E, 0x04, 0x04, 0x00 }, //  '4' 34 
            new byte[] { 0x7E, 0x40, 0x78, 0x04, 0x02, 0x44, 0x38, 0x00 }, //  '5' 35 
            new byte[] { 0x1C, 0x20, 0x40, 0x7C, 0x42, 0x42, 0x3C, 0x00 }, //  '6' 36 
            new byte[] { 0x7E, 0x42, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00 }, //  '7' 37 
            new byte[] { 0x3C, 0x42, 0x42, 0x3C, 0x42, 0x42, 0x3C, 0x00 }, //  '8' 38 
            new byte[] { 0x3C, 0x42, 0x42, 0x3E, 0x02, 0x04, 0x38, 0x00 }, //  '9' 39 
            new byte[] { 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00 }, //  '(' 28   
            new byte[] { 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x00 }, //  small sq bracket l
            new byte[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x10 }, // ';' 3B  
            new byte[] { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00 }, // multiply   
            new byte[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00 }, // ':' 3A  
            new byte[] { 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 }, // '\' 5C  

            // block 15 greek arrows
            new byte[] { 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  
            new byte[] { 0x00, 0x00, 0x34, 0x48, 0x48, 0x48, 0x34, 0x00 }, //  alpha
            new byte[] { 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x7C, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x30, 0x48, 0x48, 0x48, 0x48, 0x00 }, //  intersection 
            new byte[] { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x38, 0x40, 0x70, 0x40, 0x38, 0x00 }, //   epsilon
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C }, //   
            new byte[] { 0x00, 0x00, 0x7C, 0x44, 0x28, 0x10, 0x00, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x10, 0x28, 0x44, 0x7C, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x30, 0x10, 0x10, 0x10, 0x18, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x00, 0x38, 0x28, 0x38, 0x00, 0x00 }, //   
            new byte[] { 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 }, //   
            new byte[] { 0x7C, 0x44, 0x44, 0x44, 0x44, 0x44, 0x7C, 0x00 }, //    
            new byte[] { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00 }, //  small open circle 
            new byte[] { 0x00, 0x10, 0x54, 0x38, 0x28, 0x44, 0x00, 0x00 }, //  small asterik  
            new byte[] { 0x3C, 0x42, 0x02, 0x0C, 0x10, 0x00, 0x10, 0x00 }, //  '?' 3F   
            new byte[] { 0x00, 0x38, 0x44, 0x64, 0x58, 0x40, 0x40, 0x00 }, //   
            new byte[] { 0x70, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x20, 0x54, 0x08, 0x00, 0x00, 0x00 }, //  left tilde
            new byte[] { 0x10, 0x10, 0x10, 0x10, 0x54, 0x38, 0x10, 0x00 }, //    
            new byte[] { 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x30, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x44, 0x44, 0x44, 0x54, 0x28, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x78, 0x04, 0x04, 0x78, 0x00, 0x00 }, //   
            new byte[] { 0x08, 0x1C, 0x2A, 0x08, 0x08, 0x08, 0x08, 0x00 }, //   
            new byte[] { 0x00, 0x00, 0x3C, 0x40, 0x40, 0x3C, 0x00, 0x00 }, //   
            new byte[] { 0x00, 0x10, 0x20, 0x7E, 0x20, 0x10, 0x00, 0x00 }, //  arrow
            new byte[] { 0x00, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x00, 0x00 }, //    
            new byte[] { 0x00, 0x08, 0x04, 0x7E, 0x04, 0x08, 0x00, 0x00 }, //  arrow  
            new byte[] { 0x20, 0x10, 0x08, 0x10, 0x20, 0x00, 0x38, 0x00 }, //  greater = 
            new byte[] { 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00 }, //    

            // block 16 - Uppercase again 
            new byte[] { 0x00, 0x10, 0x28, 0x44, 0x28, 0x10, 0x00, 0x00 }, //  empty diamond
            new byte[] { 0x18, 0x24, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00 }, //  'A' 41 
            new byte[] { 0x7C, 0x22, 0x22, 0x3C, 0x22, 0x22, 0x7C, 0x00 }, //  'B' 42 
            new byte[] { 0x1C, 0x22, 0x40, 0x40, 0x40, 0x22, 0x1C, 0x00 }, //  'C' 43 
            new byte[] { 0x78, 0x24, 0x22, 0x22, 0x22, 0x24, 0x78, 0x00 }, //  'D' 44 
            new byte[] { 0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x7E, 0x00 }, //  'E' 45 
            new byte[] { 0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x40, 0x00 }, //  'F' 46 
            new byte[] { 0x1C, 0x22, 0x40, 0x4E, 0x42, 0x22, 0x1C, 0x00 }, //  'G' 47 
            new byte[] { 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00 }, //  'H' 48 
            new byte[] { 0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00 }, //  'I' 49 
            new byte[] { 0x0E, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00 }, //  'J' 4A 
            new byte[] { 0x42, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00 }, //  'K' 4B 
            new byte[] { 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00 }, //  'L' 4C 
            new byte[] { 0x42, 0x66, 0x5A, 0x5A, 0x42, 0x42, 0x42, 0x00 }, //  'M' 4D 
            new byte[] { 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x42, 0x00 }, //  'N' 4E 
            new byte[] { 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00 }, //  'O' 4F 
            new byte[] { 0x7C, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40, 0x00 }, //  'P' 50 
            new byte[] { 0x18, 0x24, 0x42, 0x42, 0x4A, 0x24, 0x1A, 0x00 }, //  'Q' 51 
            new byte[] { 0x7C, 0x42, 0x42, 0x7C, 0x48, 0x44, 0x42, 0x00 }, //  'R' 52 
            new byte[] { 0x3C, 0x42, 0x40, 0x3C, 0x02, 0x42, 0x3C, 0x00 }, //  'S' 53 
            new byte[] { 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, //  'T' 54 
            new byte[] { 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00 }, //  'U' 55 
            new byte[] { 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x18, 0x00 }, //  'V' 56 
            new byte[] { 0x42, 0x42, 0x42, 0x5A, 0x5A, 0x66, 0x42, 0x00 }, //  'W' 57 
            new byte[] { 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x00 }, //  'X' 58 
            new byte[] { 0x22, 0x22, 0x22, 0x1C, 0x08, 0x08, 0x08, 0x00 }, //  'Y' 59 
            new byte[] { 0x7E, 0x02, 0x04, 0x18, 0x20, 0x40, 0x7E, 0x00 }, //  'Z' 5A 
            new byte[] { 0x18, 0x20, 0x20, 0x40, 0x20, 0x20, 0x18, 0x00 }, //  '{'  
            new byte[] { 0x00, 0x04, 0x04, 0x7C, 0x04, 0x04, 0x00, 0x00 }, //  side T
            new byte[] { 0x30, 0x08, 0x08, 0x04, 0x08, 0x08, 0x30, 0x00 }, //  '}'  
            new byte[] { 0x08, 0x1E, 0x28, 0x1C, 0x0A, 0x3C, 0x08, 0x00 }, //  '$' 24 
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x3E, 0x3E, 0x3E }  //  square
        };

        // Reverses bits in a byte
        private static byte Reverse(byte inByte)
        {
            byte result = 0x00;

            for (byte mask = 0x80; Convert.ToInt32(mask) > 0; mask >>= 1)
            {
                // shift right current result
                result = (byte)(result >> 1);

                // tempbyte = 1 if there is a 1 in the current position
                var tempbyte = (byte)(inByte & mask);
                if (tempbyte != 0x00)
                {
                    // Insert a 1 in the left
                    result = (byte)(result | 0x80);
                }
            }

            return (result);
        }
    }
}
